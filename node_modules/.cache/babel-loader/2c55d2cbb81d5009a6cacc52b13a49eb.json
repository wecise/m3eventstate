{"remainingRequest":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/babel-loader/lib/index.js!/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/src/components/graph/GraphHandler.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/src/components/graph/GraphHandler.vue","mtime":1629791743822},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0IF90eXBlb2YgZnJvbSAiL1VzZXJzL2Nud2FuZ3pkL0RvY3VtZW50cy9jbndhbmd6ZC93ZWNpc2UvbTMvYXBwcy9tM3NlYXJjaC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0ICdteGdyYXBoL2phdmFzY3JpcHQvc3JjL2Nzcy9jb21tb24uY3NzJzsKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JzsKaW1wb3J0IG14Z3JhcGggZnJvbSAnLi9teEdyYXBoLmpzJzsKdmFyIG14RWRpdG9yID0gbXhncmFwaC5teEVkaXRvciwKICAgIG14R3JhcGggPSBteGdyYXBoLm14R3JhcGgsCiAgICBteENvbnN0YW50cyA9IG14Z3JhcGgubXhDb25zdGFudHMsCiAgICBteFBhbm5pbmdIYW5kbGVyID0gbXhncmFwaC5teFBhbm5pbmdIYW5kbGVyLAogICAgbXhHcmFwaEhhbmRsZXIgPSBteGdyYXBoLm14R3JhcGhIYW5kbGVyLAogICAgbXhHdWlkZSA9IG14Z3JhcGgubXhHdWlkZSwKICAgIG14RWRnZUhhbmRsZXIgPSBteGdyYXBoLm14RWRnZUhhbmRsZXIsCiAgICBteENsaWVudCA9IG14Z3JhcGgubXhDbGllbnQsCiAgICBteFJlY3RhbmdsZVNoYXBlID0gbXhncmFwaC5teFJlY3RhbmdsZVNoYXBlLAogICAgbXhSdWJiZXJiYW5kID0gbXhncmFwaC5teFJ1YmJlcmJhbmQsCiAgICBteENlbGxPdmVybGF5ID0gbXhncmFwaC5teENlbGxPdmVybGF5LAogICAgbXhPdXRsaW5lID0gbXhncmFwaC5teE91dGxpbmUsCiAgICBteEltYWdlID0gbXhncmFwaC5teEltYWdlLAogICAgbXhQb2ludCA9IG14Z3JhcGgubXhQb2ludCwKICAgIG14RWRnZVN0eWxlID0gbXhncmFwaC5teEVkZ2VTdHlsZSwKICAgIG14Q2VsbFRyYWNrZXIgPSBteGdyYXBoLm14Q2VsbFRyYWNrZXIsCiAgICBteFV0aWxzID0gbXhncmFwaC5teFV0aWxzLAogICAgbXhDb2RlYyA9IG14Z3JhcGgubXhDb2RlYywKICAgIG14RXZlbnQgPSBteGdyYXBoLm14RXZlbnQsCiAgICBteEhpZXJhcmNoaWNhbExheW91dCA9IG14Z3JhcGgubXhIaWVyYXJjaGljYWxMYXlvdXQsCiAgICBteE1vcnBoaW5nID0gbXhncmFwaC5teE1vcnBoaW5nLAogICAgbXhGYXN0T3JnYW5pY0xheW91dCA9IG14Z3JhcGgubXhGYXN0T3JnYW5pY0xheW91dCwKICAgIG14Q29tcGFjdFRyZWVMYXlvdXQgPSBteGdyYXBoLm14Q29tcGFjdFRyZWVMYXlvdXQsCiAgICBteENpcmNsZUxheW91dCA9IG14Z3JhcGgubXhDaXJjbGVMYXlvdXQ7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiR3JhcGhWaWV3IiwKICBwcm9wczogewogICAgZ3JhcGhEYXRhOiBPYmplY3QsCiAgICBnbG9iYWw6IE9iamVjdAogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGdyYXBoOiB7CiAgICAgICAgZWRpdG9yOiBudWxsLAogICAgICAgIGRhdGE6IHsKICAgICAgICAgIG5vZGVzOiBbXSwKICAgICAgICAgIGVkZ2VzOiBbXQogICAgICAgIH0sCiAgICAgICAgY29udHJvbDogewogICAgICAgICAgaWZJY29uOiB0cnVlLAogICAgICAgICAgb3V0bGluZTogewogICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICBpbnN0OiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgdG9vbGJhcjogewogICAgICAgICAgICBzaG93OiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHJlZnJlc2g6IHsKICAgICAgICAgICAgaW5zdDogbnVsbCwKICAgICAgICAgICAgZW5hYmxlOiBmYWxzZSwKICAgICAgICAgICAgaW50ZXJ2YWw6IDE1ICogMTAwMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbGF5b3V0OiB7CiAgICAgICAgICBkZWZhdWx0OiAnaGllcmFyY2hpY2FsX3ZlcnRpY2FsJwogICAgICAgIH0sCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIGdyaWQ6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB2ZXJ0ZXg6IHsKICAgICAgICAgICAgYWxpZ246IHsKICAgICAgICAgICAgICB2YWx1ZTogJycsCiAgICAgICAgICAgICAgbGlzdDogW3sKICAgICAgICAgICAgICAgIG5hbWU6ICflt6blr7npvZAnLAogICAgICAgICAgICAgICAgaWNvbjogJycsCiAgICAgICAgICAgICAgICB2YWx1ZTogJ214Q29uc3RhbnRzLkFMSUdOX0xFRlQnCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgbmFtZTogJ+WxheS4rScsCiAgICAgICAgICAgICAgICBpY29uOiAnJywKICAgICAgICAgICAgICAgIHZhbHVlOiAnbXhDb25zdGFudHMuQUxJR05fQ0VOVEVSJwogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIG5hbWU6ICflj7Plr7npvZAnLAogICAgICAgICAgICAgICAgaWNvbjogJycsCiAgICAgICAgICAgICAgICB2YWx1ZTogJ214Q29uc3RhbnRzLkFMSUdOX1JJR0hUJwogICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIG5hbWU6ICfkuIrlr7npvZAnLAogICAgICAgICAgICAgICAgaWNvbjogJycsCiAgICAgICAgICAgICAgICB2YWx1ZTogJ214Q29uc3RhbnRzLkFMSUdOX1RPUCcKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBuYW1lOiAn5Lit6Ze0JywKICAgICAgICAgICAgICAgIGljb246ICcnLAogICAgICAgICAgICAgICAgdmFsdWU6ICdteENvbnN0YW50cy5BTElHTl9NSURETEUnCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgbmFtZTogJ+S4i+Wvuem9kCcsCiAgICAgICAgICAgICAgICBpY29uOiAnJywKICAgICAgICAgICAgICAgIHZhbHVlOiAnbXhDb25zdGFudHMuQUxJR05fQk9UVE9NJwogICAgICAgICAgICAgIH1dCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBlZGdlOiB7CiAgICAgICAgICAgIGVuZEFycm93OiAnY2xhc3NpYycsCiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAxLAogICAgICAgICAgICBzdHJva2VDb2xvcjogJyMzMzMzMzMnLAogICAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICAgIG5hbWU6ICdpc29tZXRyaWMxJywKICAgICAgICAgICAgICBjblRpdGxlOiAn562J6LedMScsCiAgICAgICAgICAgICAgdGl0bGU6ICdpc29tZXRyaWNFZGdlU3R5bGUnLAogICAgICAgICAgICAgIGtleXM6IFtteENvbnN0YW50cy5TVFlMRV9FREdFLCBteENvbnN0YW50cy5TVFlMRV9FTEJPVywgbXhDb25zdGFudHMuU1RZTEVfQ1VSVkVELCBteENvbnN0YW50cy5TVFlMRV9OT0VER0VTVFlMRV0sCiAgICAgICAgICAgICAgdmFsdWVzOiBbJ2lzb21ldHJpY0VkZ2VTdHlsZScsIG51bGwsIG51bGwsIG51bGxdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGxpc3Q6IFt7CiAgICAgICAgICAgICAgbmFtZTogJ3N0cmFpZ2h0JywKICAgICAgICAgICAgICBjblRpdGxlOiAn55u057q/JywKICAgICAgICAgICAgICB0aXRsZTogJ2lzb21ldHJpY0VkZ2VTdHlsZScsCiAgICAgICAgICAgICAga2V5czogW214Q29uc3RhbnRzLlNUWUxFX0VER0UsIG14Q29uc3RhbnRzLlNUWUxFX0NVUlZFRCwgbXhDb25zdGFudHMuU1RZTEVfTk9FREdFU1RZTEVdLAogICAgICAgICAgICAgIHZhbHVlczogW251bGwsIG51bGwsIG51bGxdCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBuYW1lOiAnb3J0aG9nb25hbCcsCiAgICAgICAgICAgICAgY25UaXRsZTogJ+ato+S6pCcsCiAgICAgICAgICAgICAgdGl0bGU6ICdvcnRob2dvbmFsRWRnZVN0eWxlJywKICAgICAgICAgICAgICBrZXlzOiBbbXhDb25zdGFudHMuU1RZTEVfRURHRSwgbXhDb25zdGFudHMuU1RZTEVfQ1VSVkVELCBteENvbnN0YW50cy5TVFlMRV9OT0VER0VTVFlMRV0sCiAgICAgICAgICAgICAgdmFsdWVzOiBbJ29ydGhvZ29uYWxFZGdlU3R5bGUnLCBudWxsLCBudWxsXQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgbmFtZTogJ3NpbXBsZTEnLAogICAgICAgICAgICAgIGNuVGl0bGU6ICfnroDljZUxJywKICAgICAgICAgICAgICB0aXRsZTogJ2VsYm93RWRnZVN0eWxlJywKICAgICAgICAgICAgICBrZXlzOiBbbXhDb25zdGFudHMuU1RZTEVfRURHRSwgbXhDb25zdGFudHMuU1RZTEVfRUxCT1csIG14Q29uc3RhbnRzLlNUWUxFX0NVUlZFRCwgbXhDb25zdGFudHMuU1RZTEVfTk9FREdFU1RZTEVdLAogICAgICAgICAgICAgIHZhbHVlczogWydlbGJvd0VkZ2VTdHlsZScsIG51bGwsIG51bGwsIG51bGxdCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBuYW1lOiAnc2ltcGxlMicsCiAgICAgICAgICAgICAgY25UaXRsZTogJ+eugOWNlTInLAogICAgICAgICAgICAgIHRpdGxlOiAnZWxib3dFZGdlU3R5bGUnLAogICAgICAgICAgICAgIGtleXM6IFtteENvbnN0YW50cy5TVFlMRV9FREdFLCBteENvbnN0YW50cy5TVFlMRV9FTEJPVywgbXhDb25zdGFudHMuU1RZTEVfQ1VSVkVELCBteENvbnN0YW50cy5TVFlMRV9OT0VER0VTVFlMRV0sCiAgICAgICAgICAgICAgdmFsdWVzOiBbJ2VsYm93RWRnZVN0eWxlJywgJ3ZlcnRpY2FsJywgbnVsbCwgbnVsbF0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIG5hbWU6ICdpc29tZXRyaWMxJywKICAgICAgICAgICAgICBjblRpdGxlOiAn562J6LedMScsCiAgICAgICAgICAgICAgdGl0bGU6ICdpc29tZXRyaWNFZGdlU3R5bGUnLAogICAgICAgICAgICAgIGtleXM6IFtteENvbnN0YW50cy5TVFlMRV9FREdFLCBteENvbnN0YW50cy5TVFlMRV9FTEJPVywgbXhDb25zdGFudHMuU1RZTEVfQ1VSVkVELCBteENvbnN0YW50cy5TVFlMRV9OT0VER0VTVFlMRV0sCiAgICAgICAgICAgICAgdmFsdWVzOiBbJ2lzb21ldHJpY0VkZ2VTdHlsZScsIG51bGwsIG51bGwsIG51bGxdCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICBuYW1lOiAnaXNvbWV0cmljMicsCiAgICAgICAgICAgICAgY25UaXRsZTogJ+etiei3nTInLAogICAgICAgICAgICAgIHRpdGxlOiAnaXNvbWV0cmljRWRnZVN0eWxlJywKICAgICAgICAgICAgICBrZXlzOiBbbXhDb25zdGFudHMuU1RZTEVfRURHRSwgbXhDb25zdGFudHMuU1RZTEVfRUxCT1csIG14Q29uc3RhbnRzLlNUWUxFX0NVUlZFRCwgbXhDb25zdGFudHMuU1RZTEVfTk9FREdFU1RZTEVdLAogICAgICAgICAgICAgIHZhbHVlczogWydpc29tZXRyaWNFZGdlU3R5bGUnLCAndmVydGljYWwnLCBudWxsLCBudWxsXQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgbmFtZTogJ2VudGl0eVJlbGF0aW9uJywKICAgICAgICAgICAgICBjblRpdGxlOiAn5a6e5L2T5YWz6IGUJywKICAgICAgICAgICAgICB0aXRsZTogJ2VudGl0eVJlbGF0aW9uRWRnZVN0eWxlJywKICAgICAgICAgICAgICBrZXlzOiBbbXhDb25zdGFudHMuU1RZTEVfRURHRSwgbXhDb25zdGFudHMuU1RZTEVfQ1VSVkVELCBteENvbnN0YW50cy5TVFlMRV9OT0VER0VTVFlMRV0sCiAgICAgICAgICAgICAgdmFsdWVzOiBbJ2VudGl0eVJlbGF0aW9uRWRnZVN0eWxlJywgbnVsbCwgbnVsbF0KICAgICAgICAgICAgfV0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHBhdGg6IHsKICAgICAgICAgIGxpc3Q6IFtdLAogICAgICAgICAgY29sb3JzOiBbJyNmZjAwMDAnLCAnI2ZmZDcwMCcsICcjNjY2NjY2JywgJyMwMGZmZmYnLCAnIzQwZTBkMCcsICcjZmY3MzczJywgJyNkM2ZmY2UnLCAnIzMzOTlmZicsICcjMDAwMDgwJywgJyM2NmNjY2MnLCAnI2EwZGI4ZScsICcjNzk0MDQ0JywgJyM2ODk3YmInLCAnI2NjMDAwMCddCiAgICAgICAgfSwKICAgICAgICBlZGdlczogewogICAgICAgICAgdmFsdWU6ICIiLAogICAgICAgICAgbGlzdDogW10sCiAgICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICAgIHZhbHVlOiAiIiwKICAgICAgICAgICAgbGlzdDogW10KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgfSwKICB3YXRjaDogewogICAgZ3JhcGhEYXRhOiB7CiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoKSB7CiAgICAgICAgdGhpcy5zZXRHcmFwaERhdGEoKTsKICAgICAgfSwKICAgICAgaW1tZWRpYXRlOiB0cnVlCiAgICB9LAogICAgJ2dyYXBoLmNvbnRyb2wucmVmcmVzaC5lbmFibGUnOiB7CiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIodmFsKSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgICAgaWYgKHZhbCkgewogICAgICAgICAgdGhpcy5ncmFwaC5jb250cm9sLnJlZnJlc2guaW5zdCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXMub25SZWZyZXNoQ2VsbFN0YXR1cygpOwogICAgICAgICAgfSwgdGhpcy5ncmFwaC5jb250cm9sLnJlZnJlc2guaW50ZXJ2YWwpOwogICAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICAgIHR5cGU6ICJpbmZvIiwKICAgICAgICAgICAgbWVzc2FnZTogIuiHquWKqOWIt+aWsOW8gOWQryIKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuZ3JhcGguY29udHJvbC5yZWZyZXNoLmluc3QpOwogICAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICAgIHR5cGU6ICJpbmZvIiwKICAgICAgICAgICAgbWVzc2FnZTogIuiHquWKqOWIt+aWsOWFs+mXrSIKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgaW1tZWRpYXRlOiB0cnVlCiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5pbml0KCk7CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgdGhpcy5pbml0R3JhcGgoKTsKICAgIHRoaXMuZXZlbnRIdWIuJG9uKCJncmFwaC1wb3NpdGlvbiIsIGZ1bmN0aW9uICh2KSB7CiAgICAgIF90aGlzMi5vbkNlbGxQb3NpdGlvbih2LnJvdywgdi5oRmxhZywgdi52RmxhZyk7CiAgICB9KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOWIneWni+WMlgogICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLm0zLmNhbGxGUygiL21hdHJpeC9tM2dyYXBoL2VkZ2VzLmpzIiwgbnVsbCkudGhlbihmdW5jdGlvbiAocnRuKSB7CiAgICAgICAgX3RoaXMzLmdyYXBoLmVkZ2VzLmxpc3QgPSBydG4ubWVzc2FnZTsKICAgICAgfSk7IC8vIOeKtuaAgeWIt+aWsOagh+W/lwoKICAgICAgdGhpcy5ncmFwaC5jb250cm9sLnJlZnJlc2guZW5hYmxlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oIkdSQVBILVNUQVRVUy1JRlJFRlJFU0giKSA9PSAndHJ1ZSc7IC8vIOiKgueCueaYr+WQpuWPr+S7peenu+WKqCAKCiAgICAgIG14R3JhcGhIYW5kbGVyLnByb3RvdHlwZS5zZXRNb3ZlRW5hYmxlZCh0cnVlKTsgLy/mmL7npLroioLngrnkvY3nva7moIflsLogIAoKICAgICAgbXhHcmFwaEhhbmRsZXIucHJvdG90eXBlLmd1aWRlc0VuYWJsZWQgPSB0cnVlOyAvLyBBbHQgZGlzYWJsZXMgZ3VpZGVzCgogICAgICBteEd1aWRlLnByb3RvdHlwZS5pc0VuYWJsZWRGb3JFdmVudCA9IGZ1bmN0aW9uIChldnQpIHsKICAgICAgICByZXR1cm4gIW14RXZlbnQuaXNBbHREb3duKGV2dCk7CiAgICAgIH07IC8vIEVuYWJsZXMgc25hcHBpbmcgd2F5cG9pbnRzIHRvIHRlcm1pbmFscwoKCiAgICAgIG14RWRnZUhhbmRsZXIucHJvdG90eXBlLnNuYXBUb1Rlcm1pbmFscyA9IHRydWU7CiAgICB9LAogICAgLy8g5Yqg6L295Zu+5pWw5o2uCiAgICBzZXRHcmFwaERhdGE6IGZ1bmN0aW9uIHNldEdyYXBoRGF0YSgpIHsKICAgICAgaWYgKF8uaXNFbXB0eSh0aGlzLmdyYXBoRGF0YSkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5ncmFwaC5kYXRhID0gdGhpcy5ncmFwaERhdGE7CiAgICAgICAgdGhpcy5vblJlbG9hZCgpOwogICAgICB9CiAgICB9LAogICAgLy8g5Yid5aeL5YyW5Zu+5p2/CiAgICBpbml0R3JhcGg6IGZ1bmN0aW9uIGluaXRHcmFwaCgpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICB0aGlzLmdyYXBoLmVkaXRvciA9IG5ldyBteEVkaXRvcigpOwogICAgICB0aGlzLmdyYXBoLmVkaXRvci5zZXRHcmFwaENvbnRhaW5lcih0aGlzLiRyZWZzLmdyYXBoQ29udGFpbmVyLiRlbCk7CiAgICAgIHZhciBncmFwaCA9IHRoaXMuZ3JhcGguZWRpdG9yLmdyYXBoOyAvLyDmmK/lkKblhYHorrjlubPnp7vjgIJ0cnVl77ya6KGo56S65oyJ5L2PU2hpZnQr5bem6ZSu5ouW5Yqo5pe277yM5pW05LiqZ3JhcGjnp7vliqjvvJsKICAgICAgLy8gZmFsc2XvvJrmjInkvY9TaGlmdCvlt6bplK7mi5bliqjml7bvvIzpgInkuK3nmoTlm77lvaLmsLTlubPmlrnlkJHmiJbogIXlnoLnm7TmlrnlkJHlubPnp7vjgIIKCiAgICAgIGdyYXBoLnNldFBhbm5pbmcodHJ1ZSk7CgogICAgICBteFBhbm5pbmdIYW5kbGVyLnByb3RvdHlwZS5pc1Bhbm5pbmdUcmlnZ2VyID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9OyAvLyDnpoHmraLmlLnlj5joioLngrnlpKflsI8KCgogICAgICBncmFwaC5zZXRDZWxsc1Jlc2l6YWJsZShmYWxzZSk7IC8vIOemgeatouiKgueCueaWh+Wtl+e8lui+keWKn+iDvQoKICAgICAgZ3JhcGguc2V0Q2VsbHNFZGl0YWJsZShmYWxzZSk7IC8vIOemgeatoui/nue6v+enu+WKqAoKICAgICAgZ3JhcGguZGlzY29ubmVjdE9uTW92ZSA9IGZhbHNlOyAvLyDlhYHorrjov57nur/nmoTnm67moIflkozmupDmmK/lkIzkuIDlhYPntKAgCgogICAgICBncmFwaC5zZXRBbGxvd0xvb3BzKHRydWUpOyAvLyDlsYXkuK3nvKnmlL4KCiAgICAgIGdyYXBoLmNlbnRlclpvb20gPSB0cnVlOyAvLyBUb29sdGlwcyBvbiB0b3VjaCBkZXZpY2VzCgogICAgICBncmFwaC5zZXRUb29sdGlwcyghbXhDbGllbnQuSVNfVE9VQ0gpOyAvLyDmlK/mjIFIdG1sCgogICAgICBncmFwaC5zZXRIdG1sTGFiZWxzKHRydWUpOyAvLyDljrvplK/pvb/mlYjmnpwKCiAgICAgIG14UmVjdGFuZ2xlU2hhcGUucHJvdG90eXBlLmNyaXNwID0gdHJ1ZTsgLy8g6byg5qCH5qGG6YCJCgogICAgICBuZXcgbXhSdWJiZXJiYW5kKGdyYXBoKTsgLy8g6aKE6KeI5pe26byg5qCH5oKs5rWu5Yiw6IqC54K55pe277yM5pS55Y+Y6byg5qCH5qC35byPCgogICAgICBncmFwaC5nZXRDdXJzb3JGb3JDZWxsID0gZnVuY3Rpb24gKGNlbGwpIHsKICAgICAgICBpZiAoY2VsbCAhPSBudWxsICYmIGNlbGwudmFsdWUgIT0gbnVsbCAmJiBjZWxsLnZlcnRleCA9PSAxKSB7CiAgICAgICAgICByZXR1cm4gJ3BvaW50ZXInOwogICAgICAgIH0KICAgICAgfTsgLy8g6aKE6KeI5pe26byg5qCH5oKs5rWu5Yiw6IqC54K55pe277yM5pS55Y+Y6IqC54K55qC35byPCgoKICAgICAgbmV3IG14Q2VsbFRyYWNrZXIoZ3JhcGgpOyAvLyBTZXRzIGdsb2JhbCBzdHlsZXMKCiAgICAgIHZhciBzdHlsZSA9IGdyYXBoLmdldFN0eWxlc2hlZXQoKS5nZXREZWZhdWx0RWRnZVN0eWxlKCk7CiAgICAgIHN0eWxlW214Q29uc3RhbnRzLlNUWUxFX0VER0VdID0gbXhFZGdlU3R5bGUuRW50aXR5UmVsYXRpb247CiAgICAgIHN0eWxlW214Q29uc3RhbnRzLlNUWUxFX1JPVU5ERURdID0gdHJ1ZTsKICAgICAgc3R5bGVbbXhDb25zdGFudHMuRURHRV9TRUxFQ1RJT05fU1RST0tFV0lEVEhdID0gMzsKICAgICAgc3R5bGVbbXhDb25zdGFudHMuU1RZTEVfTEFCRUxfQkFDS0dST1VORENPTE9SXSA9ICd0cmFuc3BhcmVudCc7CiAgICAgIHN0eWxlW214Q29uc3RhbnRzLlNUWUxFX0xBQkVMX1BBRERJTkddID0gNTsKICAgICAgc3R5bGUgPSBncmFwaC5nZXRTdHlsZXNoZWV0KCkuZ2V0RGVmYXVsdFZlcnRleFN0eWxlKCk7CiAgICAgIHN0eWxlW214Q29uc3RhbnRzLlNUWUxFX0ZJTExDT0xPUl0gPSAnIzJmOGVlNyc7CiAgICAgIHN0eWxlW214Q29uc3RhbnRzLlNUWUxFX0ZPTlRDT0xPUl0gPSAnIzMzMzMzMyc7CiAgICAgIHN0eWxlW214Q29uc3RhbnRzLlNUWUxFX0ZPTlRTSVpFXSA9ICcxNCc7CiAgICAgIHN0eWxlW214Q29uc3RhbnRzLlNUWUxFX1NIQVBFXSA9ICdzd2ltbGFuZSc7CiAgICAgIHN0eWxlW214Q29uc3RhbnRzLlNUWUxFX1NQQUNJTkddID0gJzEwJzsKICAgICAgc3R5bGVbbXhDb25zdGFudHMuU1RZTEVfU1RBUlRTSVpFXSA9IDMwOwogICAgICBzdHlsZVtteENvbnN0YW50cy5TVFlMRV9HUkFESUVOVENPTE9SXSA9ICcjNDE5ZWZlJzsKICAgICAgc3R5bGVbbXhDb25zdGFudHMuVkVSVEVYX1NFTEVDVElPTl9TVFJPS0VXSURUSF0gPSAzOwogICAgICBzdHlsZVtteENvbnN0YW50cy5WRVJURVhfU0VMRUNUSU9OX0NPTE9SXSA9ICcjZmYwMDAwJzsgLy8g6aKE6KeI5pe26byg5qCH5oKs5rWu5Yiw6IqC54K55pe277yM5pS55Y+Y6IqC54K55qC35byPCgogICAgICBuZXcgbXhDZWxsVHJhY2tlcihncmFwaCk7IC8vIOmmluWFiOemgeeUqOa1j+iniOWZqOWPs+mUruiPnOWNlQoKICAgICAgbXhFdmVudC5kaXNhYmxlQ29udGV4dE1lbnUodGhpcy4kZWwpOyAvLyDlj7PplK7oj5zljZUKCiAgICAgIGdyYXBoLnBvcHVwTWVudUhhbmRsZXIuZmFjdG9yeU1ldGhvZCA9IGZ1bmN0aW9uIChtZW51LCBjZWxsLCBldnQpIHsKICAgICAgICBfdGhpczQuY3JlYXRlUG9wdXBNZW51KF90aGlzNC5ncmFwaC5lZGl0b3IsIGdyYXBoLCBtZW51LCBjZWxsLCBldnQpOwogICAgICB9OwoKICAgICAgdGhpcy5pbml0R3JhcGhFdmVudChncmFwaCk7CiAgICB9LAogICAgaW5pdEdyYXBoRXZlbnQ6IGZ1bmN0aW9uIGluaXRHcmFwaEV2ZW50KGdyYXBoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgLy8g5Yid5aeL5YyW5rua6L2u5Zu+57yp5pS+5LqL5Lu255uR5ZCsCiAgICAgIHRoaXMuYWRkU2Nyb2xsTGlzdGVuZXIoZ3JhcGgpOyAvLyBBZGQgdGhlIHNvdXJjZSB2ZXJ0ZXgKCiAgICAgIGdyYXBoLmFkZExpc3RlbmVyKG14RXZlbnQuQUREX0NFTExTLCBfLmRlYm91bmNlKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczUub25SZWZyZXNoQ2VsbFN0YXR1cygpOwogICAgICB9KSwgMTAwMCk7IC8vIOWIneWni+WMlum5sOecvOinhuWbvgoKICAgICAgdGhpcy5vbkluaXRPdXRsaW5lKGdyYXBoKTsgLy8g55uR5ZCs5ouW5ou95LqL5Lu2CgogICAgICB2YXIgY29udGFpbmVyID0gdGhpcy4kcmVmcy5ncmFwaENvbnRhaW5lci4kZWw7CiAgICAgIG14RXZlbnQuYWRkTGlzdGVuZXIoY29udGFpbmVyLCAnZHJhZ292ZXInLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgaWYgKGdyYXBoLmlzRW5hYmxlZCgpKSB7CiAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9CiAgICAgIH0pOyAvLyDnm5HlkKzmi5blhaXkuovku7YKCiAgICAgIG14RXZlbnQuYWRkTGlzdGVuZXIoY29udGFpbmVyLCAnZHJvcCcsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICBpZiAoZ3JhcGguaXNFbmFibGVkKCkpIHsKICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBHZXRzIGRyb3AgbG9jYXRpb24gcG9pbnQgZm9yIHZlcnRleAoKICAgICAgICAgIHZhciBwdCA9IG14VXRpbHMuY29udmVydFBvaW50KGdyYXBoLmNvbnRhaW5lciwgbXhFdmVudC5nZXRDbGllbnRYKGV2dCksIG14RXZlbnQuZ2V0Q2xpZW50WShldnQpKTsKICAgICAgICAgIHZhciB0ciA9IGdyYXBoLnZpZXcudHJhbnNsYXRlOwogICAgICAgICAgdmFyIHNjYWxlID0gZ3JhcGgudmlldy5zY2FsZTsKICAgICAgICAgIHZhciB4ID0gcHQueCAvIHNjYWxlIC0gdHIueDsKICAgICAgICAgIHZhciB5ID0gcHQueSAvIHNjYWxlIC0gdHIueTsgLy8gQ29udmVydHMgbG9jYWwgZW50aXR5IHRvIGdyYXBoIGNlbGwKCiAgICAgICAgICB2YXIgYWRkQ2VsbFRvR3JhcGggPSBmdW5jdGlvbiBhZGRDZWxsVG9HcmFwaChpdGVtcykgewogICAgICAgICAgICBncmFwaC5nZXRNb2RlbCgpLmJlZ2luVXBkYXRlKCk7CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGdyYXBoLmdldE1vZGVsKCk7CiAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IGdyYXBoLmdldERlZmF1bHRQYXJlbnQoKTsKCiAgICAgICAgICAgICAgXy5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbiAodikgewogICAgICAgICAgICAgICAgdmFyIGNlbGwgPSBncmFwaC5nZXRNb2RlbCgpLmdldENlbGwodi5pZCk7CgogICAgICAgICAgICAgICAgaWYgKGNlbGwpIHsKICAgICAgICAgICAgICAgICAgX3RoaXM1LiRtZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiaW5mbyIsCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogIuW3suacieivpeWunuS9kyIKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIHR5cGUgPSB2Lmljb24gfHwgJ21hdHJpeCc7IC8vIOWPr+iuvue9rum7mOiupOaYvuekuuWxnuaApwoKICAgICAgICAgICAgICAgIHZhciBuYW1lID0gJyc7CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5VUkxfUEFSQU1TX0dSQVBIKSB7CiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IHZbd2luZG93LlVSTF9QQVJBTVNfR1JBUEgudGl0bGVdOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG5hbWUgPSB2W190aGlzNS5tb2RlbC5ncmFwaC5kZWZhdWx0LnRpdGxlXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIG5hbWUgPSB2WyJpZCJdOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBpbWFnZVVybCA9IF90aGlzNS5pbWFnZVJlbmRlckhhbmRsZXIodHlwZSk7CgogICAgICAgICAgICAgICAgaWYgKF90aGlzNS5ncmFwaC5jb250cm9sLmlmSWNvbikgewogICAgICAgICAgICAgICAgICBpZiAoX3RoaXM1LmNoZWNrSW1nRXhpc3RzKCIiLmNvbmNhdCh0eXBlLCAiLnBuZyIpKSkgewogICAgICAgICAgICAgICAgICAgIGNlbGwgPSBncmFwaC5pbnNlcnRWZXJ0ZXgocGFyZW50LCB2LmlkLCBuYW1lLCB4LCB5LCA2MCwgNjAsICJzaGFwZT1pbWFnZTtodG1sPTE7aW1hZ2U9Ii5jb25jYXQoaW1hZ2VVcmwsICI7dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDsiKSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY2VsbCA9IGdyYXBoLmluc2VydFZlcnRleChwYXJlbnQsIHYuaWQsIG5hbWUsIHgsIHksIDUwLCA1MCwgInNoYXBlPWVsbGlwc2U7cGVyaW1ldGVyPWVsbGlwc2VQZXJpbWV0ZXI7aHRtbD0xO2xhYmVsUG9zaXRpb249Y2VudGVyO3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207YWxpZ249Y2VudGVyO3ZlcnRpY2FsQWxpZ249bWlkZGxlOyIpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IC8vIHNoYXBl5riy5p+TCiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjZWxsID0gZ3JhcGguaW5zZXJ0VmVydGV4KHBhcmVudCwgdi5pZCwgbmFtZSwgeCwgeSwgNTAsIDUwLCAic2hhcGU9ZWxsaXBzZTtwZXJpbWV0ZXI9ZWxsaXBzZVBlcmltZXRlcjtodG1sPTE7bGFiZWxQb3NpdGlvbj1jZW50ZXI7dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTthbGlnbj1jZW50ZXI7dmVydGljYWxBbGlnbj1taWRkbGU7Iik7CiAgICAgICAgICAgICAgICAgIH0gLy8g5a6a5L2N5YiwY2VsbAoKCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgZ3JhcGguc2Nyb2xsQ2VsbFRvVmlzaWJsZShjZWxsKTsKICAgICAgICAgICAgICAgICAgZ3JhcGguc2V0U2VsZWN0aW9uQ2VsbChjZWxsKTsKICAgICAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgZ3JhcGguZ2V0TW9kZWwoKS5lbmRVcGRhdGUoKTsKCiAgICAgICAgICAgICAgX3RoaXM1LiRlbWl0KCJjb250cm9sLXNob3ciLCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CgogICAgICAgICAgdmFyIGl0ZW1zID0gW0pTT04ucGFyc2UoZXZ0LmRhdGFUcmFuc2Zlci5nZXREYXRhKCJUZXh0IikpXTsKICAgICAgICAgIGFkZENlbGxUb0dyYXBoKGl0ZW1zKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOa7mui9rue8qeaUvuS6i+S7tuebkeWQrAogICAgYWRkU2Nyb2xsTGlzdGVuZXI6IGZ1bmN0aW9uIGFkZFNjcm9sbExpc3RlbmVyKGdyYXBoKSB7CiAgICAgIHZhciB0ID0gZnVuY3Rpb24gYShlbGVtZW50LCB3aGVlbEhhbmRsZSkgewogICAgICAgIGlmIChfdHlwZW9mKGVsZW1lbnQpICE9ICdvYmplY3QnKSByZXR1cm47CiAgICAgICAgaWYgKHR5cGVvZiB3aGVlbEhhbmRsZSAhPSAnZnVuY3Rpb24nKSByZXR1cm47IC8vIOebkea1i+a1j+iniOWZqAoKICAgICAgICBpZiAodHlwZW9mIGEuYnJvd3NlciA9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgdmFyIHVzZXIgPSBuYXZpZ2F0b3IudXNlckFnZW50OwogICAgICAgICAgdmFyIGIgPSB7fTsKICAgICAgICAgIGIub3BlcmEgPSB1c2VyLmluZGV4T2YoIk9wZXJhIikgPiAtMSAmJiBfdHlwZW9mKHdpbmRvdy5vcGVyYSkgPT0gIm9iamVjdCI7CiAgICAgICAgICBiLmtodG1sID0gKHVzZXIuaW5kZXhPZigiS0hUTUwiKSA+IC0xIHx8IHVzZXIuaW5kZXhPZigiQXBwbGVXZWJLaXQiKSA+IC0xIHx8IHVzZXIuaW5kZXhPZigiS29ucXVlcm9yIikgPiAtMSkgJiYgIWIub3BlcmE7CiAgICAgICAgICBiLmllID0gdXNlci5pbmRleE9mKCJNU0lFIikgPiAtMSAmJiAhYi5vcGVyYTsKICAgICAgICAgIGIuZ2Vja28gPSB1c2VyLmluZGV4T2YoIkdlY2tvIikgPiAtMSAmJiAhYi5raHRtbDsKICAgICAgICAgIGEuYnJvd3NlciA9IGI7CiAgICAgICAgfQoKICAgICAgICBpZiAoZWxlbWVudCA9PSB3aW5kb3cpIGVsZW1lbnQgPSBkb2N1bWVudDsKICAgICAgICBpZiAoYS5icm93c2VyLmllKSBlbGVtZW50LmF0dGFjaEV2ZW50KCdvbm1vdXNld2hlZWwnLCB3aGVlbEhhbmRsZSk7ZWxzZSBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoYS5icm93c2VyLmdlY2tvID8gJ0RPTU1vdXNlU2Nyb2xsJyA6ICdtb3VzZXdoZWVsJywgd2hlZWxIYW5kbGUsIGZhbHNlKTsKICAgICAgfTsKCiAgICAgIHQoZ3JhcGguY29udGFpbmVyLCB0aGlzLndoZWVsSGFuZGxlKTsKICAgIH0sCiAgICAvLyDmu5rova7nvKnmlL7lm74KICAgIHdoZWVsSGFuZGxlOiBmdW5jdGlvbiB3aGVlbEhhbmRsZShlKSB7CiAgICAgIHZhciB1cGNoZWNrOwoKICAgICAgaWYgKGUud2hlZWxEZWx0YSkgewogICAgICAgIHVwY2hlY2sgPSBlLndoZWVsRGVsdGEgPiAwID8gMSA6IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdXBjaGVjayA9IGUuZGV0YWlsIDwgMCA/IDEgOiAwOwogICAgICB9CgogICAgICBpZiAodXBjaGVjaykgewogICAgICAgIHRoaXMuZ3JhcGguZWRpdG9yLmdyYXBoLnpvb21JbigpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZ3JhcGguZWRpdG9yLmdyYXBoLnpvb21PdXQoKTsKICAgICAgfQoKICAgICAgaWYgKHdpbmRvdy5ldmVudCkgewogICAgICAgIGUucmV0dXJuVmFsdWUgPSBmYWxzZTsKICAgICAgICB3aW5kb3cuZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgfQogICAgfSwKICAgIGNoZWNrSW1nRXhpc3RzOiBmdW5jdGlvbiBjaGVja0ltZ0V4aXN0cygpIHsKICAgICAgLy9sZXQgdGVybSA9IHtwYXJlbnQ6Ii9hc3NldHMvaW1hZ2VzL2VudGl0eS9wbmciLCBuYW1lOm5hbWV9OwogICAgICByZXR1cm4gdHJ1ZTsgLy9mc0hhbmRsZXIuY2FsbEZzSlNjcmlwdCgiL21hdHJpeC9tM2dyYXBoL2NoZWNrSGF2ZUZpbGUuanMiLCBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkodGVybSkpKS5tZXNzYWdlOwogICAgfSwKICAgIC8vIOa4suafk+WbvueJh+adpea6kAogICAgaW1hZ2VSZW5kZXJIYW5kbGVyOiBmdW5jdGlvbiBpbWFnZVJlbmRlckhhbmRsZXIoaWNvbikgewogICAgICBpZiAoXy5pbmNsdWRlcyhpY29uLCAnaHR0cDovLycpKSB7CiAgICAgICAgcmV0dXJuIGljb247CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICIvc3RhdGljL2Fzc2V0cy9pbWFnZXMvZW50aXR5L3BuZy8iLmNvbmNhdChpY29uLCAiLnBuZyIpOwogICAgICB9CiAgICB9LAogICAgLy8g5YiH5o2i6aKE6KeICiAgICBvbkluaXRPdXRsaW5lOiBmdW5jdGlvbiBvbkluaXRPdXRsaW5lKGdyYXBoKSB7CiAgICAgIG5ldyBteE91dGxpbmUoZ3JhcGgsIHRoaXMuJHJlZnMub3V0bGluZUNvbnRhaW5lcik7CiAgICB9LAogICAgb25Ub2dnbGVPdXRsaW5lOiBmdW5jdGlvbiBvblRvZ2dsZU91dGxpbmUodmFsKSB7CiAgICAgIHRoaXMuZ3JhcGguY29udHJvbC5vdXRsaW5lLnNob3cgPSB2YWw7CiAgICB9LAogICAgLy8g6Ieq5Yqo5Yi35paw5o6n5Yi2CiAgICBvblJlZnJlc2hDaGFuZ2U6IGZ1bmN0aW9uIG9uUmVmcmVzaENoYW5nZSh2YWwpIHsKICAgICAgdGhpcy5vblJlZnJlc2hDZWxsU3RhdHVzKCk7CiAgICAgIHRoaXMuZ3JhcGguY29udHJvbC5yZWZyZXNoLmVuYWJsZSA9IHZhbDsKICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oIkdSQVBILVNUQVRVUy1JRlJFRlJFU0giLCB0aGlzLmdyYXBoLmNvbnRyb2wucmVmcmVzaC5lbmFibGUpOwogICAgfSwKICAgIC8vIOWumuS9jeWbvuiKgueCuQogICAgb25Qb3NpdGlvbjogZnVuY3Rpb24gb25Qb3NpdGlvbihpZCwgaEZsYWcsIHZGbGFnKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdmFyIGVkaXRvciA9IHRoaXMuZ3JhcGguZWRpdG9yOwogICAgICB2YXIgZ3JhcGggPSBlZGl0b3IuZ3JhcGg7CiAgICAgIHZhciBjZWxsID0gZ3JhcGguZ2V0TW9kZWwoKS5nZXRDZWxsKGlkKTsKCiAgICAgIHRyeSB7CiAgICAgICAgLy8g5oGi5aSN5Zu+5a6e6ZmF5aSn5bCPCiAgICAgICAgZWRpdG9yLmV4ZWN1dGUoImFjdHVhbFNpemUiKTsKICAgICAgICB2YXIgY29udGFpbmVyVyA9IGdyYXBoLmNvbnRhaW5lci5jbGllbnRXaWR0aDsKICAgICAgICB2YXIgY29udGFpbmVySCA9IGdyYXBoLmNvbnRhaW5lci5jbGllbnRIZWlnaHQ7CiAgICAgICAgdmFyIHggPSAtY2VsbC5nZW9tZXRyeS54ICsgKGNvbnRhaW5lclcgLSBjZWxsLmdlb21ldHJ5LndpZHRoKSAvIDI7CiAgICAgICAgdmFyIHkgPSAtY2VsbC5nZW9tZXRyeS55ICsgKGNvbnRhaW5lckggLSBjZWxsLmdlb21ldHJ5LmhlaWdodCkgLyAyOwoKICAgICAgICBpZiAoaEZsYWcpIHsKICAgICAgICAgIHggPSB4IC8gMjsKICAgICAgICB9CgogICAgICAgIGlmICh2RmxhZykgewogICAgICAgICAgeSA9IHkgLyAyOwogICAgICAgIH0KCiAgICAgICAgZ3JhcGguZ2V0VmlldygpLnNldFRyYW5zbGF0ZSh4LCB5KTsKICAgICAgICBncmFwaC5zY3JvbGxDZWxsVG9WaXNpYmxlKGNlbGwpOwogICAgICAgIGdyYXBoLnNldFNlbGVjdGlvbkNlbGxzKFtjZWxsXSk7CgogICAgICAgIF8uZGVsYXkoZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHN0YXRlID0gZ3JhcGgudmlldy5nZXRTdGF0ZShjZWxsKTsKCiAgICAgICAgICBpZiAoX3RoaXM2Lm1vZGVsLmNvbnRyb2wuaWZJY29uKSB7CiAgICAgICAgICAgIHN0YXRlLnNoYXBlLm5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImltYWdlIilbMF0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdhbmltYXRlZCBmbGFzaCcpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RhdGUuc2hhcGUubm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZWxsaXBzZSIpWzBdLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnYW5pbWF0ZWQgZmxhc2gnKTsKICAgICAgICAgIH0KICAgICAgICB9LCA1MDApOyAvLyDpgInmi6noioLngrnnqoHlh7rmmL7npLoKCgogICAgICAgIGdyYXBoLnNldENlbGxTdHlsZXMobXhDb25zdGFudHMuU1RZTEVfUEVSSU1FVEVSX1NQQUNJTkcsIDgsIFtjZWxsXSk7CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIC8vIOW9k+WJjeeUu+W4g+S4reS4jeWMheWQq+ivpeWunuS9kwogICAgICAgIHRoaXMuJG1lc3NhZ2UoewogICAgICAgICAgdHlwZTogImluZm8iLAogICAgICAgICAgbWVzc2FnZTogIueUu+W4g+ayoeacieivpeWunuS9kyAiCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDlm77oh6rpgILlupTlubblsYXkuK3mmL7npLoKICAgIG9uR3JhcGhUb0NlbnRlcjogZnVuY3Rpb24gb25HcmFwaFRvQ2VudGVyKGltbWVkaWF0ZSkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBlZGl0b3IgPSB0aGlzLmdyYXBoLmVkaXRvcjsKICAgICAgdmFyIGdyYXBoID0gZWRpdG9yLmdyYXBoOwogICAgICB2YXIgcGFyZW50ID0gZ3JhcGguZ2V0RGVmYXVsdFBhcmVudCgpOwogICAgICB2YXIgbGltaXQgPSAzMDsgLy8g5b2T5YmN55S75biD6IqC54K55pWw6YeP6ZiI5YC8CgogICAgICB2YXIgdG9wQ2VsbCA9IGdyYXBoLmZpbmRUcmVlUm9vdHMocGFyZW50KVswXTsgLy8g6I635Y+W5b2T5YmN6YCJ5oup6IqC54K5IAogICAgICAvLyDpkojlr7nliqDovb3lrZDlm77nmoTlnLrmma8KICAgICAgLy8g5pyA6aG25bGC6IqC54K5ICBncmFwaC5jZW50ZXIodHJ1ZSx0cnVlLDAsMC41KTsKICAgICAgLy8g5a2Q6IqC54K5ICBncmFwaC5jZW50ZXIodHJ1ZSx0cnVlLDAuNSwwLjUpOwoKICAgICAgdmFyIHRvQ2VudGVyID0gZnVuY3Rpb24gdG9DZW50ZXIoKSB7CiAgICAgICAgdmFyIHNlbGVjdGlvbkNlbGwgPSBncmFwaC5nZXRTZWxlY3Rpb25DZWxsKCk7CiAgICAgICAgdmFyIGFsbENlbGxzID0gZ3JhcGguZ2V0Q2hpbGRWZXJ0aWNlcyhwYXJlbnQpOwoKICAgICAgICBpZiAoYWxsQ2VsbHMubGVuZ3RoID4gbGltaXQpIHsKICAgICAgICAgIC8vIOWbvuiHqumAguW6lAogICAgICAgICAgZWRpdG9yLmV4ZWN1dGUoImZpdCIpOwogICAgICAgICAgZWRpdG9yLmV4ZWN1dGUoImFjdHVhbFNpemUiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8g5Zu+5a6e6ZmF5aSn5bCPCiAgICAgICAgICBlZGl0b3IuZXhlY3V0ZSgiYWN0dWFsU2l6ZSIpOwogICAgICAgIH0gLy8g5rKh5pyJ6YCJ5oup6IqC54K5CgoKICAgICAgICBpZiAoc2VsZWN0aW9uQ2VsbCA9PSBudWxsKSB7CiAgICAgICAgICBncmFwaC5jZW50ZXIodHJ1ZSwgdHJ1ZSwgMC41LCAwLjUpOyAvLyBtaWRkbGUtY2VudGVyCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIOmAieaLqeS6huacgOmhtuWxguiKgueCuQogICAgICAgICAgaWYgKHNlbGVjdGlvbkNlbGwgPT0gdG9wQ2VsbCkgewogICAgICAgICAgICBncmFwaC5jZW50ZXIodHJ1ZSwgdHJ1ZSwgMCwgMC41KTsgLy8gdG9wLWNlbnRlcgogICAgICAgICAgICAvLyDlrprkvY3pgInmi6noioLngrkKCiAgICAgICAgICAgIHNlbGYub25Qb3NpdGlvbihzZWxlY3Rpb25DZWxsLmdldElkKCksIHRydWUsIHRydWUpOwogICAgICAgICAgfSAvLyDpgInmi6nkuoblrZDoioLngrkKICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIGdyYXBoLmNlbnRlcih0cnVlLCB0cnVlLCAwLjUsIDAuNSk7IC8vIG1pZGRsZS1jZW50ZXIKICAgICAgICAgICAgICAvLyDlrprkvY3pgInmi6noioLngrkKCiAgICAgICAgICAgICAgc2VsZi5vblBvc2l0aW9uKHNlbGVjdGlvbkNlbGwuZ2V0SWQoKSwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IC8vZ3JhcGguY2xlYXJTZWxlY3Rpb24oKTsKCiAgICAgIH07CgogICAgICBpZiAoaW1tZWRpYXRlKSB7CiAgICAgICAgZWRpdG9yLmV4ZWN1dGUoImZpdCIpOwogICAgICAgIHRvQ2VudGVyKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGxvYWRTdmcgPSBmdW5jdGlvbiBsb2FkU3ZnKCkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIHJ0biA9IGdyYXBoLmdldENoaWxkRWRnZXMocGFyZW50KTsKCiAgICAgICAgICAgIGlmIChfLnNpemUocnRuKSA+IDApIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgaWYgKGxvYWRTdmcoKSkgewogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGVkaXRvci5leGVjdXRlKCJmaXQiKTsKICAgICAgICAgICAgdG9DZW50ZXIoKTsKICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNldFRpbWVvdXQobG9hZFN2ZywgNTApOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIG9uUmVsb2FkOiBmdW5jdGlvbiBvblJlbG9hZCgpIHsKICAgICAgdHJ5IHsKICAgICAgICAkKHRoaXMuJHJlZnMuZ3JhcGhDb250YWluZXIuJGVsKS5lbXB0eSgpOyAvLyDmuIXnqboKCiAgICAgICAgdGhpcy5ncmFwaC5lZGl0b3IuZXhlY3V0ZSgic2VsZWN0QWxsIik7CiAgICAgICAgdGhpcy5ncmFwaC5lZGl0b3IuZXhlY3V0ZSgiZGVsZXRlIik7IC8vIOmHjeaWsOWIneWni+WMlgoKICAgICAgICB0aGlzLmluaXRHcmFwaCgpOwogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICB0aGlzLmluaXRHcmFwaCgpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRoaXMucmVuZGVyR3JhcGgodGhpcy5ncmFwaC5lZGl0b3IpOwogICAgICB9CiAgICB9LAogICAgLy8g5Zu+57uY5Yi2CiAgICByZW5kZXJHcmFwaDogZnVuY3Rpb24gcmVuZGVyR3JhcGgoZWRpdG9yKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgdmFyIGdyYXBoID0gZWRpdG9yLmdyYXBoOwogICAgICB2YXIgbW9kZWwgPSBncmFwaC5nZXRNb2RlbCgpOwogICAgICB2YXIgcGFyZW50ID0gZ3JhcGguZ2V0RGVmYXVsdFBhcmVudCgpOwogICAgICBtb2RlbC5iZWdpblVwZGF0ZSgpOwoKICAgICAgdHJ5IHsKICAgICAgICBpZiAoIV8uaXNFbXB0eSh3aW5kb3cuVVJMX1BBUkFNU19JVEVNKSkgewogICAgICAgICAgdmFyIGRvYyA9IG14VXRpbHMucGFyc2VYbWwodGhpcy5ncmFwaC5kYXRhKTsKICAgICAgICAgIHZhciBjb2RlYyA9IG5ldyBteENvZGVjKGRvYyk7CiAgICAgICAgICBjb2RlYy5kZWNvZGUoZG9jLmRvY3VtZW50RWxlbWVudCwgbW9kZWwpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgYWxsTm9kZXMgPSBfLmNvbmNhdChbXSwgdGhpcy5ncmFwaC5kYXRhLm5vZGVzKTsKCiAgICAgICAgICB2YXIgYWxsRWRnZXMgPSBfLmNvbmNhdChbXSwgdGhpcy5ncmFwaC5kYXRhLmVkZ2VzKTsKCiAgICAgICAgICBpZiAodGhpcy5ncmFwaC5kYXRhWydkaWZmJ10gJiYgJ2FkZCcgaW4gdGhpcy5ncmFwaC5kYXRhWydkaWZmJ10pIHsKICAgICAgICAgICAgYWxsTm9kZXMgPSBfLmNvbmNhdChhbGxOb2RlcywgdGhpcy5ncmFwaC5kYXRhLmRpZmYuYWRkLm5vZGVzKTsKICAgICAgICAgICAgYWxsRWRnZXMgPSBfLmNvbmNhdChhbGxFZGdlcywgdGhpcy5ncmFwaC5kYXRhLmRpZmYuYWRkLmVkZ2VzKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGhpcy5ncmFwaC5kYXRhWydkaWZmJ10gJiYgJ2RlbCcgaW4gdGhpcy5ncmFwaC5kYXRhWydkaWZmJ10pIHsKICAgICAgICAgICAgYWxsTm9kZXMgPSBfLmNvbmNhdChhbGxOb2RlcywgdGhpcy5ncmFwaC5kYXRhLmRpZmYuZGVsLm5vZGVzKTsKICAgICAgICAgICAgYWxsRWRnZXMgPSBfLmNvbmNhdChhbGxFZGdlcywgdGhpcy5ncmFwaC5kYXRhLmRpZmYuZGVsLmVkZ2VzKTsKICAgICAgICAgIH0KCiAgICAgICAgICBhbGxOb2RlcyA9IF8udW5pcUJ5KGFsbE5vZGVzLCAnaWQnKTsKICAgICAgICAgIGFsbEVkZ2VzID0gXy51bmlxQnkoYWxsRWRnZXMsICdpZCcpOyAvLyDnu5jliLboioLngrkKCiAgICAgICAgICBfLmZvckVhY2goYWxsTm9kZXMsIGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICAgIHZhciBfdHlwZSA9IHYuX2ljb24gfHwgJ21hdHJpeCc7IC8vIOWPr+iuvue9rum7mOiupOaYvuekuuWxnuaApwoKCiAgICAgICAgICAgIHZhciBfbmFtZSA9ICcnOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBpZiAod2luZG93LlVSTF9QQVJBTVNfR1JBUEgpIHsKICAgICAgICAgICAgICAgIF9uYW1lID0gdlt3aW5kb3cuVVJMX1BBUkFNU19HUkFQSC50aXRsZV07CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIF9uYW1lID0gdltfdGhpczcubW9kZWwuZ3JhcGguZGVmYXVsdC50aXRsZV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICBfbmFtZSA9IHZbImlkIl07CiAgICAgICAgICAgIH0gLy8g6YCJ5oup6IqC54K55riy5p+T5qih5byP77yaaWNvbi9zaGFwZQoKCiAgICAgICAgICAgIHZhciBpbWFnZVVybCA9IF90aGlzNy5pbWFnZVJlbmRlckhhbmRsZXIoX3R5cGUpOyAvLyBpY29u5riy5p+TCgoKICAgICAgICAgICAgaWYgKF90aGlzNy5ncmFwaC5jb250cm9sLmlmSWNvbikgewogICAgICAgICAgICAgIGlmIChfdGhpczcuY2hlY2tJbWdFeGlzdHMoIiIuY29uY2F0KF90eXBlLCAiLnBuZyIpKSkgewogICAgICAgICAgICAgICAgZ3JhcGguaW5zZXJ0VmVydGV4KHBhcmVudCwgdi5pZCwgX25hbWUsIDUwLCA1MCwgNjAsIDYwLCAic2hhcGU9aW1hZ2U7aHRtbD0xO2ltYWdlPSIuY29uY2F0KGltYWdlVXJsLCAiO3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207dmVydGljYWxBbGlnbj10b3A7IikpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBncmFwaC5pbnNlcnRWZXJ0ZXgocGFyZW50LCB2LmlkLCBfbmFtZSwgNTAsIDUwLCA1MCwgNTAsICJzaGFwZT1lbGxpcHNlO3BlcmltZXRlcj1lbGxpcHNlUGVyaW1ldGVyO2h0bWw9MTtsYWJlbFBvc2l0aW9uPWNlbnRlcjt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO2FsaWduPWNlbnRlcjt2ZXJ0aWNhbEFsaWduPW1pZGRsZTsiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gLy8gc2hhcGXmuLLmn5MKICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBncmFwaC5pbnNlcnRWZXJ0ZXgocGFyZW50LCB2LmlkLCBfbmFtZSwgNTAsIDUwLCA1MCwgNTAsICJzaGFwZT1lbGxpcHNlO3BlcmltZXRlcj1lbGxpcHNlUGVyaW1ldGVyO2h0bWw9MTtsYWJlbFBvc2l0aW9uPWNlbnRlcjt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO2FsaWduPWNlbnRlcjt2ZXJ0aWNhbEFsaWduPW1pZGRsZTsiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9KTsgLy8g57uY5Yi26L65CgoKICAgICAgICAgIF8uZm9yRWFjaChhbGxFZGdlcywgZnVuY3Rpb24gKGssIGluZGV4KSB7CiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBtb2RlbC5nZXRDZWxsKGsuc291cmNlKTsKICAgICAgICAgICAgdmFyIHRhcmdldCA9IG1vZGVsLmdldENlbGwoay50YXJnZXQpOwogICAgICAgICAgICB2YXIgYmFzZUVkZ2VTdHlsZSA9ICJlZGdlU3R5bGU9Ii5jb25jYXQoX3RoaXM3LmdyYXBoLnN0eWxlLmVkZ2UudmFsdWUudGl0bGUsICI7aHRtbD0xO3JvdW5kZWQ9MTtqZXR0eVNpemU9YXV0bztvcnRob2dvbmFsTG9vcD0xO2VuZEFycm93PWJsb2NrO2VuZEZpbGw9MTsiKTsKICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9ICcnOwoKICAgICAgICAgICAgaWYgKGsudHdvd2F5KSB7CiAgICAgICAgICAgICAgZGlyZWN0aW9uID0gJ3N0YXJ0QXJyb3c9YmxvY2s7ZW5kQXJyb3c9YmxvY2s7ZW5kRmlsbD0xOyc7CiAgICAgICAgICAgIH0gLy8gZWRnZeS4unBhdGjnmoTmoLflvI8KCgogICAgICAgICAgICBpZiAoay5jbGFzcyA9PT0gInBhdGgiKSB7CiAgICAgICAgICAgICAgYmFzZUVkZ2VTdHlsZSA9ICJlZGdlU3R5bGU9Ii5jb25jYXQoX3RoaXM3LmdyYXBoLnN0eWxlLmVkZ2UudmFsdWUudGl0bGUsICI7b3J0aG9nb25hbExvb3A9MTtzdHJva2VXaWR0aD0xO2Rhc2hlZD0xO3N0YXJ0RmlsbD0wO2VuZEFycm93PW5vbmU7ZW5kRmlsbD0wO3N0YXJ0QXJyb3c9bm9uZTtvcnRob2dvbmFsPTE7ZWxib3c9dmVydGljYWw7Iik7CgogICAgICAgICAgICAgIHZhciBzdHJva2VDb2xvciA9IF90aGlzNy5tb2RlbC5ncmFwaC5wYXRoLmNvbG9yc1tpbmRleF0gfHwgXy5zYW1wbGUoX3RoaXM3LmdyYXBoLnBhdGguY29sb3JzKTsKCiAgICAgICAgICAgICAgZ3JhcGguaW5zZXJ0RWRnZShwYXJlbnQsIGsuaWQsIGsuY2xhc3MsIHNvdXJjZSwgdGFyZ2V0LCBiYXNlRWRnZVN0eWxlICsgZGlyZWN0aW9uICsgInN0cm9rZUNvbG9yPSIuY29uY2F0KHN0cm9rZUNvbG9yKSk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHZhciBlZGdlTmFtZSA9IF8uZmluZChfdGhpczcuZ3JhcGguZWRnZXMubGlzdCwgewogICAgICAgICAgICAgICAgbmFtZTogay5jbGFzcwogICAgICAgICAgICAgIH0pLnJlbWVkeTsKCiAgICAgICAgICAgICAgZ3JhcGguaW5zZXJ0RWRnZShwYXJlbnQsIGsuaWQsIGVkZ2VOYW1lLCBzb3VyY2UsIHRhcmdldCwgYmFzZUVkZ2VTdHlsZSArIGRpcmVjdGlvbik7CiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgIGdyYXBoLmluc2VydEVkZ2UocGFyZW50LCBrLmlkLCBrLmNsYXNzLCBzb3VyY2UsIHRhcmdldCwgYmFzZUVkZ2VTdHlsZSArIGRpcmVjdGlvbik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBtb2RlbC5lbmRVcGRhdGUoKTsKICAgICAgICB0aGlzLmV4ZWN1dGVMYXlvdXQoKTsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzNy5vbkdyYXBoVG9DZW50ZXIodHJ1ZSk7CiAgICAgICAgfSwgNTAwKTsKICAgICAgfQogICAgfSwKICAgIHJlbmRlckFuZE1lcmdlR3JhcGg6IGZ1bmN0aW9uIHJlbmRlckFuZE1lcmdlR3JhcGgoZWRpdG9yKSB7CiAgICAgIHZhciBfdGhpczggPSB0aGlzOwoKICAgICAgdmFyIGdyYXBoID0gbmV3IG14R3JhcGgoKTsKICAgICAgdmFyIHBhcmVudCA9IGdyYXBoLmdldERlZmF1bHRQYXJlbnQoKTsKICAgICAgdmFyIG1vZGVsID0gZ3JhcGguZ2V0TW9kZWwoKTsKICAgICAgbW9kZWwuYmVnaW5VcGRhdGUoKTsKCiAgICAgIHRyeSB7CiAgICAgICAgaWYgKCFfLmlzRW1wdHkod2luZG93LlVSTF9QQVJBTVNfSVRFTSkpIHsKICAgICAgICAgIHZhciBkb2MgPSBteFV0aWxzLnBhcnNlWG1sKHRoaXMuZ3JhcGguZGF0YSk7CiAgICAgICAgICB2YXIgY29kZWMgPSBuZXcgbXhDb2RlYyhkb2MpOwogICAgICAgICAgY29kZWMuZGVjb2RlKGRvYy5kb2N1bWVudEVsZW1lbnQsIG1vZGVsKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGFsbE5vZGVzID0gXy5jb25jYXQoW10sIHRoaXMuZ3JhcGguZGF0YS5ub2Rlcyk7CgogICAgICAgICAgdmFyIGFsbEVkZ2VzID0gXy5jb25jYXQoW10sIHRoaXMuZ3JhcGguZGF0YS5lZGdlcyk7CgogICAgICAgICAgaWYgKHRoaXMuZ3JhcGguZGF0YVsnZGlmZiddICYmICdhZGQnIGluIHRoaXMuZ3JhcGguZGF0YVsnZGlmZiddKSB7CiAgICAgICAgICAgIGFsbE5vZGVzID0gXy5jb25jYXQoYWxsTm9kZXMsIHRoaXMuZ3JhcGguZGF0YS5kaWZmLmFkZC5ub2Rlcyk7CiAgICAgICAgICAgIGFsbEVkZ2VzID0gXy5jb25jYXQoYWxsRWRnZXMsIHRoaXMuZ3JhcGguZGF0YS5kaWZmLmFkZC5lZGdlcyk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRoaXMuZ3JhcGguZGF0YVsnZGlmZiddICYmICdkZWwnIGluIHRoaXMuZ3JhcGguZGF0YVsnZGlmZiddKSB7CiAgICAgICAgICAgIGFsbE5vZGVzID0gXy5jb25jYXQoYWxsTm9kZXMsIHRoaXMuZ3JhcGguZGF0YS5kaWZmLmRlbC5ub2Rlcyk7CiAgICAgICAgICAgIGFsbEVkZ2VzID0gXy5jb25jYXQoYWxsRWRnZXMsIHRoaXMuZ3JhcGguZGF0YS5kaWZmLmRlbC5lZGdlcyk7CiAgICAgICAgICB9CgogICAgICAgICAgYWxsTm9kZXMgPSBfLnVuaXFCeShhbGxOb2RlcywgJ2lkJyk7CiAgICAgICAgICBhbGxFZGdlcyA9IF8udW5pcUJ5KGFsbEVkZ2VzLCAnaWQnKTsgLy8g57uY5Yi26IqC54K5CgogICAgICAgICAgXy5mb3JFYWNoKGFsbE5vZGVzLCBmdW5jdGlvbiAodikgewogICAgICAgICAgICB2YXIgdHlwZSA9IHYuX2ljb24gfHwgJ21hdHJpeCc7IC8vIOWPr+iuvue9rum7mOiupOaYvuekuuWxnuaApwoKICAgICAgICAgICAgdmFyIG5hbWUgPSAnJzsKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5VUkxfUEFSQU1TX0dSQVBIKSB7CiAgICAgICAgICAgICAgICBuYW1lID0gdlt3aW5kb3cuVVJMX1BBUkFNU19HUkFQSC50aXRsZV07CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5hbWUgPSB2W190aGlzOC5tb2RlbC5ncmFwaC5kZWZhdWx0LnRpdGxlXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgIG5hbWUgPSB2WyJpZCJdOwogICAgICAgICAgICB9IC8vIOmAieaLqeiKgueCuea4suafk+aooeW8j++8mmljb24vc2hhcGUKCgogICAgICAgICAgICB2YXIgaW1hZ2VVcmwgPSBfdGhpczguaW1hZ2VSZW5kZXJIYW5kbGVyKHR5cGUpOyAvLyBpY29u5riy5p+TCgoKICAgICAgICAgICAgaWYgKF90aGlzOC5ncmFwaC5jb250cm9sLmlmSWNvbikgewogICAgICAgICAgICAgIGlmIChfdGhpczguY2hlY2tJbWdFeGlzdHMoIiIuY29uY2F0KHR5cGUsICIucG5nIikpKSB7CiAgICAgICAgICAgICAgICBncmFwaC5pbnNlcnRWZXJ0ZXgocGFyZW50LCB2LmlkLCBuYW1lLCA1MCwgNTAsIDYwLCA2MCwgInNoYXBlPWltYWdlO2h0bWw9MTtpbWFnZT0iLmNvbmNhdChpbWFnZVVybCwgIjt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO3ZlcnRpY2FsQWxpZ249dG9wOyIpKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZ3JhcGguaW5zZXJ0VmVydGV4KHBhcmVudCwgdi5pZCwgbmFtZSwgNTAsIDUwLCA1MCwgNTAsICJzaGFwZT1lbGxpcHNlO3BlcmltZXRlcj1lbGxpcHNlUGVyaW1ldGVyO2h0bWw9MTtsYWJlbFBvc2l0aW9uPWNlbnRlcjt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO2FsaWduPWNlbnRlcjt2ZXJ0aWNhbEFsaWduPW1pZGRsZTsiKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gLy8gc2hhcGXmuLLmn5MKICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBncmFwaC5pbnNlcnRWZXJ0ZXgocGFyZW50LCB2LmlkLCBuYW1lLCA1MCwgNTAsIDUwLCA1MCwgInNoYXBlPWVsbGlwc2U7cGVyaW1ldGVyPWVsbGlwc2VQZXJpbWV0ZXI7aHRtbD0xO2xhYmVsUG9zaXRpb249Y2VudGVyO3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207YWxpZ249Y2VudGVyO3ZlcnRpY2FsQWxpZ249bWlkZGxlOyIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0pOyAvLyDnu5jliLbovrkKCgogICAgICAgICAgXy5mb3JFYWNoKGFsbEVkZ2VzLCBmdW5jdGlvbiAoaywgaW5kZXgpIHsKICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG1vZGVsLmdldENlbGwoay5zb3VyY2UpOwogICAgICAgICAgICB2YXIgdGFyZ2V0ID0gbW9kZWwuZ2V0Q2VsbChrLnRhcmdldCk7CiAgICAgICAgICAgIHZhciBiYXNlRWRnZVN0eWxlID0gImVkZ2VTdHlsZT0iLmNvbmNhdChfdGhpczguZ3JhcGguc3R5bGUuZWRnZS52YWx1ZS50aXRsZSwgIjtodG1sPTE7cm91bmRlZD0xO2pldHR5U2l6ZT1hdXRvO29ydGhvZ29uYWxMb29wPTE7ZW5kQXJyb3c9YmxvY2s7ZW5kRmlsbD0xOyIpOwogICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gJyc7CgogICAgICAgICAgICBpZiAoay50d293YXkpIHsKICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAnc3RhcnRBcnJvdz1ibG9jaztlbmRBcnJvdz1ibG9jaztlbmRGaWxsPTE7JzsKICAgICAgICAgICAgfSAvLyBlZGdl5Li6cGF0aOeahOagt+W8jwoKCiAgICAgICAgICAgIGlmIChrLmNsYXNzID09PSAicGF0aCIpIHsKICAgICAgICAgICAgICBiYXNlRWRnZVN0eWxlID0gImVkZ2VTdHlsZT0iLmNvbmNhdChfdGhpczguZ3JhcGguc3R5bGUuZWRnZS52YWx1ZS50aXRsZSwgIjtvcnRob2dvbmFsTG9vcD0xO3N0cm9rZVdpZHRoPTE7ZGFzaGVkPTE7c3RhcnRGaWxsPTA7ZW5kQXJyb3c9bm9uZTtlbmRGaWxsPTA7c3RhcnRBcnJvdz1ub25lO29ydGhvZ29uYWw9MTtlbGJvdz12ZXJ0aWNhbDsiKTsKCiAgICAgICAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gX3RoaXM4Lm1vZGVsLmdyYXBoLnBhdGguY29sb3JzW2luZGV4XSB8fCBfLnNhbXBsZShfdGhpczguZ3JhcGgucGF0aC5jb2xvcnMpOwoKICAgICAgICAgICAgICBncmFwaC5pbnNlcnRFZGdlKHBhcmVudCwgay5pZCwgay5jbGFzcywgc291cmNlLCB0YXJnZXQsIGJhc2VFZGdlU3R5bGUgKyBkaXJlY3Rpb24gKyAic3Ryb2tlQ29sb3I9Ii5jb25jYXQoc3Ryb2tlQ29sb3IpKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgdmFyIGVkZ2VOYW1lID0gXy5maW5kKF90aGlzOC5ncmFwaC5lZGdlcy5saXN0LCB7CiAgICAgICAgICAgICAgICBuYW1lOiBrLmNsYXNzCiAgICAgICAgICAgICAgfSkucmVtZWR5OwoKICAgICAgICAgICAgICBncmFwaC5pbnNlcnRFZGdlKHBhcmVudCwgay5pZCwgZWRnZU5hbWUsIHNvdXJjZSwgdGFyZ2V0LCBiYXNlRWRnZVN0eWxlICsgZGlyZWN0aW9uKTsKICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgZ3JhcGguaW5zZXJ0RWRnZShwYXJlbnQsIGsuaWQsIGsuY2xhc3MsIHNvdXJjZSwgdGFyZ2V0LCBiYXNlRWRnZVN0eWxlICsgZGlyZWN0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9IGZpbmFsbHkgewogICAgICAgIG1vZGVsLmVuZFVwZGF0ZSgpOyAvLyDlkIjlubblm74KCiAgICAgICAgZWRpdG9yLmdyYXBoLmdldE1vZGVsKCkubWVyZ2VDaGlsZHJlbihtb2RlbC5nZXRSb290KCksIHBhcmVudCwgdHJ1ZSk7CiAgICAgICAgdGhpcy5leGVjdXRlTGF5b3V0KCk7CiAgICAgICAgdGhpcy5vbkdyYXBoVG9DZW50ZXIodHJ1ZSk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDlm77liIbmnpAgLSDlrZDlm74KICAgIGxvYWRTdWJHcmFwaDogZnVuY3Rpb24gbG9hZFN1YkdyYXBoKG5vZGUpIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CgogICAgICB2YXIgdGVybSA9ICIiOwogICAgICB2YXIgZWRnZVN0ciA9IF8uaXNFbXB0eShub2RlLmVkZ2UpID8gbm9kZS5lZGdlIDogIjoiLmNvbmNhdChub2RlLmVkZ2UpOwoKICAgICAgaWYgKG5vZGUuZGlyZWN0aW9uID09ICJvdXQiKSB7CiAgICAgICAgdGVybSA9ICJtYXRjaCAoJyIuY29uY2F0KG5vZGUubm9kZS5pZCwgIicpIC0gWyIpLmNvbmNhdChlZGdlU3RyLCAiKiIpLmNvbmNhdChub2RlLnN0ZXAsICJdIC0+ICgpIik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGVybSA9ICJtYXRjaCAoJyIuY29uY2F0KG5vZGUubm9kZS5pZCwgIicpIDwtIFsiKS5jb25jYXQoZWRnZVN0ciwgIioiKS5jb25jYXQobm9kZS5zdGVwLCAiXSAtICgpIik7CiAgICAgIH0KCiAgICAgIHRoaXMubTMuY2FsbEZTKCIvbWF0cml4L20zZ3JhcGgvZ3JhcGhTZXJ2aWNlLmpzIiwgZW5jb2RlVVJJQ29tcG9uZW50KHRlcm0pKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgcnRuID0gcmVzLm1lc3NhZ2VbMF0uZ3JhcGg7CiAgICAgICAgY29uc29sZS5sb2coMTExMSwgcnRuKTsKCiAgICAgICAgdmFyIGFsbE5vZGVzID0gXy5jb25jYXQoW10sIHJ0bi5ub2Rlcyk7CgogICAgICAgIHZhciBhbGxFZGdlcyA9IF8uY29uY2F0KFtdLCBydG4uZWRnZXMpOwoKICAgICAgICBpZiAocnRuWydkaWZmJ10gJiYgJ2FkZCcgaW4gcnRuWydkaWZmJ10pIHsKICAgICAgICAgIGFsbE5vZGVzID0gXy5jb25jYXQoYWxsTm9kZXMsIHJ0bi5kaWZmLmFkZC5ub2Rlcyk7CiAgICAgICAgICBhbGxFZGdlcyA9IF8uY29uY2F0KGFsbEVkZ2VzLCBydG4uZGlmZi5hZGQuZWRnZXMpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJ0blsnZGlmZiddICYmICdkZWwnIGluIHJ0blsnZGlmZiddKSB7CiAgICAgICAgICBhbGxOb2RlcyA9IF8uY29uY2F0KGFsbE5vZGVzLCBydG4uZGlmZi5kZWwubm9kZXMpOwogICAgICAgICAgYWxsRWRnZXMgPSBfLmNvbmNhdChhbGxFZGdlcywgcnRuLmRpZmYuZGVsLmVkZ2VzKTsKICAgICAgICB9CgogICAgICAgIF90aGlzOS5ncmFwaC5kYXRhLm5vZGVzID0gXy51bmlxQnkoYWxsTm9kZXMsICdpZCcpOwogICAgICAgIF90aGlzOS5ncmFwaC5kYXRhLmVkZ2VzID0gXy51bmlxQnkoYWxsRWRnZXMsICdpZCcpOwoKICAgICAgICBfdGhpczkucmVuZGVyQW5kTWVyZ2VHcmFwaChfdGhpczkuZ3JhcGguZWRpdG9yKTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g5Y+z6ZSu6I+c5Y2VCiAgICBjcmVhdGVQb3B1cE1lbnU6IGZ1bmN0aW9uIGNyZWF0ZVBvcHVwTWVudShlZGl0b3IsIGdyYXBoLCBtZW51LCBjZWxsLCBldnQpIHsKICAgICAgdmFyIF90aGlzMTAgPSB0aGlzOwoKICAgICAgLy8g6IqC54K55oiW6L656I+c5Y2VCiAgICAgIGlmIChjZWxsICE9IG51bGwpIHsKICAgICAgICAvLyBjZWxsIG9iamVjdAogICAgICAgIHZhciBpZCA9IGNlbGwuZ2V0SWQoKTsKICAgICAgICB2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7IC8vIOiKgueCueiPnOWNlQoKICAgICAgICBpZiAoIWNlbGwuZWRnZSkgewogICAgICAgICAgaWYgKCF0aGlzLm0zLmF1dGguaXNBZG1pbikgcmV0dXJuOwogICAgICAgICAgdmFyIG5vZGUgPSB7CiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgICAgICB0eXBlOiAnZXZlbnQnLAogICAgICAgICAgICBjZWxsOiBjZWxsCiAgICAgICAgICB9OwogICAgICAgICAgLyogbWVudS5hZGRJdGVtKCflrp7kvZPliIbmnpAnLCBudWxsLCAoKT0+ewogICAgICAgICAgICAgIAogICAgICAgICAgfSk7ICovCgogICAgICAgICAgLyogbWVudS5hZGRJdGVtKCflrp7kvZPliKDpmaQnLCBudWxsLCAoKT0+ewogICAgICAgICAgICAgIHRoaXMucmVtb3ZlRW50aXR5SGFuZGxlcihjZWxsKTsKICAgICAgICAgIH0pOyAqLwogICAgICAgICAgLy8gbWVudS5hZGRTZXBhcmF0b3IoKTsKCiAgICAgICAgICBtZW51LmFkZEl0ZW0oJ+iKgueCueWIoOmZpCcsIG51bGwsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXMxMC5vbkRlbGV0ZVNlbGVjdGVkQ2VsbHMoZ3JhcGgsIGV2dCAhPSBudWxsICYmIG14RXZlbnQuaXNTaGlmdERvd24oZXZ0KSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciB2YXJzID0ge307CiAgICAgICAgICB2YXIgc3VibWVudUJzZWFyY2ggPSBudWxsOwogICAgICAgICAgdmFyIHN1Ym1lbnVFc2VhcmNoID0gbnVsbDsKICAgICAgICAgIHRoaXMubTMuY2FsbEZTKCIvbWF0cml4L20zZ3JhcGgvZ2V0RWRnZXNCeUNsYXNzLmpzIiwgZW5jb2RlVVJJQ29tcG9uZW50KGlkKSkudGhlbihmdW5jdGlvbiAocnRuKSB7CiAgICAgICAgICAgIG1lbnUuYWRkU2VwYXJhdG9yKCk7CiAgICAgICAgICAgIHZhciBlZGdlTGlzdEJ5Q2xhc3MgPSBydG4ubWVzc2FnZTsKCiAgICAgICAgICAgIGlmIChfLmZpbmQoZWRnZUxpc3RCeUNsYXNzLCB7CiAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnb3V0JwogICAgICAgICAgICB9KSkgewogICAgICAgICAgICAgIHN1Ym1lbnVCc2VhcmNoID0gbWVudS5hZGRJdGVtKCfotbfngrnmn6Xor6InLCBudWxsLCBudWxsKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKF8uZmluZChlZGdlTGlzdEJ5Q2xhc3MsIHsKICAgICAgICAgICAgICBkaXJlY3Rpb246ICdpbicKICAgICAgICAgICAgfSkpIHsKICAgICAgICAgICAgICBzdWJtZW51RXNlYXJjaCA9IG1lbnUuYWRkSXRlbSgn57uI54K55p+l6K+iJywgbnVsbCwgbnVsbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF8uZm9yRWFjaChlZGdlTGlzdEJ5Q2xhc3MsIGZ1bmN0aW9uICh2LCBpbmRleCkgewogICAgICAgICAgICAgIGlmICh2LmRpcmVjdGlvbiA9PSAnb3V0JykgewogICAgICAgICAgICAgICAgdmFyc1snc3VibWVudUJTdGVwJyArIGluZGV4XSA9IG1lbnUuYWRkSXRlbSh2LnJlbWVkeSwgbnVsbCwgbnVsbCwgc3VibWVudUJzZWFyY2gpOwogICAgICAgICAgICAgICAgdmFyIHN0ZXBDb3VudCA9IEFycmF5KDYpOwoKICAgICAgICAgICAgICAgIF8uZm9yRWFjaChzdGVwQ291bnQsIGZ1bmN0aW9uICh2YWwsIGlkeCkgewogICAgICAgICAgICAgICAgICB2YXIgc3RlcCA9IGlkeCArIDE7CiAgICAgICAgICAgICAgICAgIG1lbnUuYWRkSXRlbShzdGVwICsgJ+i3sycsIG51bGwsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpczEwLmxvYWRTdWJHcmFwaCh7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICJvdXQiLAogICAgICAgICAgICAgICAgICAgICAgbm9kZTogbm9kZSwKICAgICAgICAgICAgICAgICAgICAgIHN0ZXA6IHN0ZXAsCiAgICAgICAgICAgICAgICAgICAgICBlZGdlOiB2Lm5hbWUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSwgdmFyc1snc3VibWVudUJTdGVwJyArIGluZGV4XSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyc1snc3VibWVudUVTdGVwJyArIGluZGV4XSA9IG1lbnUuYWRkSXRlbSh2LnJlbWVkeSwgbnVsbCwgbnVsbCwgc3VibWVudUVzZWFyY2gpOwoKICAgICAgICAgICAgICAgIHZhciBfc3RlcENvdW50ID0gQXJyYXkoNik7CgogICAgICAgICAgICAgICAgXy5mb3JFYWNoKF9zdGVwQ291bnQsIGZ1bmN0aW9uICh2YWwsIGlkeCkgewogICAgICAgICAgICAgICAgICB2YXIgc3RlcCA9IGlkeCArIDE7CiAgICAgICAgICAgICAgICAgIG1lbnUuYWRkSXRlbShzdGVwICsgJ+i3sycsIG51bGwsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpczEwLmxvYWRTdWJHcmFwaCh7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICJpbiIsCiAgICAgICAgICAgICAgICAgICAgICBub2RlOiBub2RlLAogICAgICAgICAgICAgICAgICAgICAgc3RlcDogc3RlcCwKICAgICAgICAgICAgICAgICAgICAgIGVkZ2U6IHYubmFtZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9LCB2YXJzWydzdWJtZW51RVN0ZXAnICsgaW5kZXhdKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKCF0aGlzLm0zLmF1dGguaXNBZG1pbikgcmV0dXJuOyAvLyBub2RlID0ge2lkOiBpZCwgdmFsdWU6IHZhbHVlLCB0eXBlOidlZGdlJywgY2VsbDogY2VsbH07CgogICAgICAgICAgLyogbWVudS5hZGRJdGVtKCflrp7kvZPlhbPns7vliIbmnpAnLCBudWxsLCAoKT0+ewogICAgICAgICAgICAgIAogICAgICAgICAgfSk7CiAgICAgICAgICBtZW51LmFkZEl0ZW0oJ+WunuS9k+WFs+ezu+WIoOmZpCcsIG51bGwsICgpPT57CiAgICAgICAgICAgICAgCiAgICAgICAgICB9KTsKICAgICAgICAgIG1lbnUuYWRkU2VwYXJhdG9yKCk7CiAgICAgICAgICAgbWVudS5hZGRJdGVtKCfmlrDlu7rlhbPns7vnsbvlnosnLCBudWxsLCAoKT0+ewogICAgICAgICAgICAgIAogICAgICAgICAgfSk7CiAgICAgICAgICBtZW51LmFkZEl0ZW0oJ+abtOaWsOWFs+ezu+exu+WeiycsIG51bGwsICgpPT57CiAgICAgICAgICAgICAgCiAgICAgICAgICB9KTsKICAgICAgICAgIAogICAgICAgICAgbWVudS5hZGRTZXBhcmF0b3IoKTsKICAgICAgICAgICBtZW51LmFkZEl0ZW0oJ+makOiXj+i+uScsIG51bGwsICgpPT57CiAgICAgICAgICAgICAgCiAgICAgICAgICB9KTsgKi8KICAgICAgICB9CiAgICAgIH0gLy8g55S75biD6I+c5Y2VCiAgICAgIGVsc2UgewogICAgICAgICAgdmFyIGNlbGxzID0gdGhpcy5ncmFwaC5lZGl0b3IuZ3JhcGguZ2V0Q2hpbGRWZXJ0aWNlcyh0aGlzLmdyYXBoLmVkaXRvci5ncmFwaC5nZXREZWZhdWx0UGFyZW50KCkpOwoKICAgICAgICAgIGlmICghXy5pc0VtcHR5KGNlbGxzKSkgewogICAgICAgICAgICBtZW51LmFkZEl0ZW0oJ+a4heepuicsIG51bGwsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBfdGhpczEwLm9uQ2FudmFzQ2xlYXIoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgbWVudS5hZGRTZXBhcmF0b3IoKTsKICAgICAgICAgIHZhciBzdWJtZW51TGF5b3V0ID0gbWVudS5hZGRJdGVtKCfluIPlsYAnLCBudWxsLCBudWxsKTsKICAgICAgICAgIHZhciBzdWJtZW51TGF5b3V0SGllcmFyY2hpY2FsID0gbWVudS5hZGRJdGVtKCfliIblsYLluIPlsYAnLCBudWxsLCBudWxsLCBzdWJtZW51TGF5b3V0KTsKICAgICAgICAgIG1lbnUuYWRkSXRlbSgn5LiK5LiLJywgbnVsbCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczEwLmdyYXBoLmxheW91dC5kZWZhdWx0ID0gJ2hpZXJhcmNoaWNhbF92ZXJ0aWNhbCc7CgogICAgICAgICAgICBfdGhpczEwLmV4ZWN1dGVMYXlvdXQoKTsKICAgICAgICAgIH0sIHN1Ym1lbnVMYXlvdXRIaWVyYXJjaGljYWwpOwogICAgICAgICAgbWVudS5hZGRJdGVtKCflt6blj7MnLCBudWxsLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzMTAuZ3JhcGgubGF5b3V0LmRlZmF1bHQgPSAnaGllcmFyY2hpY2FsX2hvcml6b250YWwnOwoKICAgICAgICAgICAgX3RoaXMxMC5leGVjdXRlTGF5b3V0KCk7CiAgICAgICAgICB9LCBzdWJtZW51TGF5b3V0SGllcmFyY2hpY2FsKTsKICAgICAgICAgIHZhciBzdWJtZW51TGF5b3V0VHJlZSA9IG1lbnUuYWRkSXRlbSgn5qCR5b2i5biD5bGAJywgbnVsbCwgbnVsbCwgc3VibWVudUxheW91dCk7CiAgICAgICAgICBtZW51LmFkZEl0ZW0oJ+S4iuS4iycsIG51bGwsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXMxMC5ncmFwaC5sYXlvdXQuZGVmYXVsdCA9ICd0cmVlX3ZlcnRpY2FsJzsKCiAgICAgICAgICAgIF90aGlzMTAuZXhlY3V0ZUxheW91dCgpOwogICAgICAgICAgfSwgc3VibWVudUxheW91dFRyZWUpOwogICAgICAgICAgbWVudS5hZGRJdGVtKCflt6blj7MnLCBudWxsLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzMTAuZ3JhcGgubGF5b3V0LmRlZmF1bHQgPSAndHJlZV9ob3Jpem9udGFsJzsKCiAgICAgICAgICAgIF90aGlzMTAuZXhlY3V0ZUxheW91dCgpOwogICAgICAgICAgfSwgc3VibWVudUxheW91dFRyZWUpOwogICAgICAgICAgbWVudS5hZGRJdGVtKCfpmo/mnLrluIPlsYAnLCBudWxsLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzMTAuZ3JhcGgubGF5b3V0LmRlZmF1bHQgPSAnb3JnYW5pYyc7CgogICAgICAgICAgICBfdGhpczEwLmV4ZWN1dGVMYXlvdXQoKTsKICAgICAgICAgIH0sIHN1Ym1lbnVMYXlvdXQpOwogICAgICAgICAgbWVudS5hZGRJdGVtKCflnIblvaLluIPlsYAnLCBudWxsLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzMTAuZ3JhcGgubGF5b3V0LmRlZmF1bHQgPSAnY2lyY2xlJzsKCiAgICAgICAgICAgIF90aGlzMTAuZXhlY3V0ZUxheW91dCgpOwogICAgICAgICAgfSwgc3VibWVudUxheW91dCk7CiAgICAgICAgfQogICAgfSwKICAgIC8vIOiuvue9ruW4g+WxgAogICAgZXhlY3V0ZUxheW91dDogZnVuY3Rpb24gZXhlY3V0ZUxheW91dCgpIHsKICAgICAgdmFyIGdyYXBoID0gdGhpcy5ncmFwaC5lZGl0b3IuZ3JhcGg7CiAgICAgIHZhciBwYXJlbnQgPSBncmFwaC5nZXREZWZhdWx0UGFyZW50KCk7CiAgICAgIHZhciBsYXlvdXQgPSB0aGlzLmdyYXBoLmxheW91dDsKICAgICAgdmFyIG1vZGVsID0gZ3JhcGguZ2V0TW9kZWwoKTsgLy8g5biD5bGA5a6a5LmJCgogICAgICBpZiAobGF5b3V0LmRlZmF1bHQgPT09ICdoaWVyYXJjaGljYWxfdmVydGljYWwnKSB7CiAgICAgICAgLy8gTGF5b3V0IGhpZXJhcmNoaWNhbAogICAgICAgIG1vZGVsLmJlZ2luVXBkYXRlKCk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBsYXlvdXQuaW5zdCA9IG5ldyBteEhpZXJhcmNoaWNhbExheW91dChncmFwaCwgbXhDb25zdGFudHMuRElSRUNUSU9OX05PUlRIKTsKICAgICAgICAgIGxheW91dC5pbnN0LmVkZ2VTdHlsZSA9IGxheW91dC5lZGdlU3R5bGU7CiAgICAgICAgICBsYXlvdXQuaW5zdC5pbnRyYUNlbGxTcGFjaW5nID0gODA7CiAgICAgICAgICBsYXlvdXQuaW5zdC5pbnRlclJhbmtDZWxsU3BhY2luZyA9IDgwOwogICAgICAgICAgbGF5b3V0Lmluc3QuZXhlY3V0ZShwYXJlbnQsIG51bGwpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICB2YXIgbW9ycGggPSBuZXcgbXhNb3JwaGluZyhncmFwaCk7CiAgICAgICAgICBtb3JwaC5hZGRMaXN0ZW5lcihteEV2ZW50LkRPTkUsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgbW9kZWwuZW5kVXBkYXRlKCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIG1vcnBoLnN0YXJ0QW5pbWF0aW9uKCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGxheW91dC5kZWZhdWx0ID09PSAnaGllcmFyY2hpY2FsX2hvcml6b250YWwnKSB7CiAgICAgICAgLy8gTGF5b3V0IGhpZXJhcmNoaWNhbAogICAgICAgIG1vZGVsLmJlZ2luVXBkYXRlKCk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBsYXlvdXQuaW5zdCA9IG5ldyBteEhpZXJhcmNoaWNhbExheW91dChncmFwaCwgbXhDb25zdGFudHMuRElSRUNUSU9OX1dFU1QpOwogICAgICAgICAgbGF5b3V0Lmluc3QuZWRnZVN0eWxlID0gbGF5b3V0LmVkZ2VTdHlsZTsKICAgICAgICAgIGxheW91dC5pbnN0LmludHJhQ2VsbFNwYWNpbmcgPSA4MDsKICAgICAgICAgIGxheW91dC5pbnN0LmludGVyUmFua0NlbGxTcGFjaW5nID0gODA7CiAgICAgICAgICBsYXlvdXQuaW5zdC5leGVjdXRlKHBhcmVudCwgbnVsbCk7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIHZhciBfbW9ycGggPSBuZXcgbXhNb3JwaGluZyhncmFwaCk7CgogICAgICAgICAgX21vcnBoLmFkZExpc3RlbmVyKG14RXZlbnQuRE9ORSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBtb2RlbC5lbmRVcGRhdGUoKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIF9tb3JwaC5zdGFydEFuaW1hdGlvbigpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChsYXlvdXQuZGVmYXVsdCA9PT0gJ29yZ2FuaWMnKSB7CiAgICAgICAgLy8gTGF5b3V0IE9yZ2FuaWMKICAgICAgICBtb2RlbC5iZWdpblVwZGF0ZSgpOwoKICAgICAgICB0cnkgewogICAgICAgICAgbGF5b3V0Lmluc3QgPSBuZXcgbXhGYXN0T3JnYW5pY0xheW91dChncmFwaCk7CiAgICAgICAgICBsYXlvdXQuaW5zdC5mb3JjZUNvbnN0YW50ID0gMTQwOyAvL2xheW91dC5pbnN0LmV4ZWN1dGUocGFyZW50KTsKCiAgICAgICAgICBsYXlvdXQuaW5zdC5leGVjdXRlKHBhcmVudCwgbnVsbCk7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIG1vZGVsLmVuZFVwZGF0ZSgpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChsYXlvdXQuZGVmYXVsdCA9PT0gJ3RyZWVfdmVydGljYWwnKSB7CiAgICAgICAgLyogTGF5b3V0IHRyZWUgdmVydGljYWwgKi8KICAgICAgICBtb2RlbC5iZWdpblVwZGF0ZSgpOwoKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIHRtcCA9IGdyYXBoLmdldFNlbGVjdGlvbkNlbGwoKTsKICAgICAgICAgIHZhciByb290cyA9IG51bGw7CiAgICAgICAgICB2YXIgY2VsbHMgPSBbdG1wXTsKCiAgICAgICAgICBpZiAodG1wID09IG51bGwgfHwgbW9kZWwuZ2V0Q2hpbGRDb3VudCh0bXApID09IDApIHsKICAgICAgICAgICAgaWYgKG1vZGVsLmdldEVkZ2VDb3VudCh0bXApID09IDApIHsKICAgICAgICAgICAgICByb290cyA9IGdyYXBoLmZpbmRUcmVlUm9vdHMocGFyZW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcm9vdHMgPSBncmFwaC5maW5kVHJlZVJvb3RzKHRtcCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHJvb3RzICE9IG51bGwgJiYgcm9vdHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICBjZWxscyA9IHJvb3RzOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIF8uZm9yRWFjaChjZWxscywgZnVuY3Rpb24gKHYpIHsKICAgICAgICAgICAgICBsYXlvdXQuaW5zdCA9IG5ldyBteENvbXBhY3RUcmVlTGF5b3V0KGdyYXBoLCBmYWxzZSk7CiAgICAgICAgICAgICAgbGF5b3V0Lmluc3QuZWRnZVJvdXRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICBsYXlvdXQuaW5zdC5sZXZlbERpc3RhbmNlID0gMzA7CiAgICAgICAgICAgICAgbGF5b3V0Lmluc3QuZXhlY3V0ZShwYXJlbnQsIHYpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgdmFyIF9tb3JwaDIgPSBuZXcgbXhNb3JwaGluZyhncmFwaCk7CgogICAgICAgICAgX21vcnBoMi5hZGRMaXN0ZW5lcihteEV2ZW50LkRPTkUsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgbW9kZWwuZW5kVXBkYXRlKCk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBfbW9ycGgyLnN0YXJ0QW5pbWF0aW9uKCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKGxheW91dC5kZWZhdWx0ID09PSAndHJlZV9ob3Jpem9udGFsJykgewogICAgICAgIC8qIExheW91dCB0cmVlIGhvcml6b250YWwgKi8KICAgICAgICBtb2RlbC5iZWdpblVwZGF0ZSgpOwoKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIF90bXAgPSBncmFwaC5nZXRTZWxlY3Rpb25DZWxsKCk7CgogICAgICAgICAgdmFyIF9yb290cyA9IG51bGw7CiAgICAgICAgICB2YXIgX2NlbGxzID0gW190bXBdOwoKICAgICAgICAgIGlmIChfdG1wID09IG51bGwgfHwgbW9kZWwuZ2V0Q2hpbGRDb3VudChfdG1wKSA9PSAwKSB7CiAgICAgICAgICAgIGlmIChtb2RlbC5nZXRFZGdlQ291bnQoX3RtcCkgPT0gMCkgewogICAgICAgICAgICAgIF9yb290cyA9IGdyYXBoLmZpbmRUcmVlUm9vdHMocGFyZW50KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3Jvb3RzID0gZ3JhcGguZmluZFRyZWVSb290cyhfdG1wKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoX3Jvb3RzICE9IG51bGwgJiYgX3Jvb3RzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgX2NlbGxzID0gX3Jvb3RzOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChfY2VsbHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICBfLmZvckVhY2goX2NlbGxzLCBmdW5jdGlvbiAodikgewogICAgICAgICAgICAgIGxheW91dC5pbnN0ID0gbmV3IG14Q29tcGFjdFRyZWVMYXlvdXQoZ3JhcGgsIHRydWUpOwogICAgICAgICAgICAgIGxheW91dC5pbnN0LmVkZ2VSb3V0aW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgbGF5b3V0Lmluc3QubGV2ZWxEaXN0YW5jZSA9IDMwOwogICAgICAgICAgICAgIGxheW91dC5pbnN0LmV4ZWN1dGUocGFyZW50LCB2KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIHZhciBfbW9ycGgzID0gbmV3IG14TW9ycGhpbmcoZ3JhcGgpOwoKICAgICAgICAgIF9tb3JwaDMuYWRkTGlzdGVuZXIobXhFdmVudC5ET05FLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG1vZGVsLmVuZFVwZGF0ZSgpOwogICAgICAgICAgfSk7CgogICAgICAgICAgX21vcnBoMy5zdGFydEFuaW1hdGlvbigpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvKiBMYXlvdXQgQ2lyY2xlICovCiAgICAgICAgbW9kZWwuYmVnaW5VcGRhdGUoKTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGxheW91dC5pbnN0ID0gbmV3IG14Q2lyY2xlTGF5b3V0KGdyYXBoKTsKICAgICAgICAgIGxheW91dC5pbnN0LmV4ZWN1dGUocGFyZW50LCBudWxsKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgbW9kZWwuZW5kVXBkYXRlKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgLy8g6IqC54K55ZGK6K2m54q25oCBCiAgICBvblJlZnJlc2hDZWxsU3RhdHVzOiBmdW5jdGlvbiBvblJlZnJlc2hDZWxsU3RhdHVzKCkgewogICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CgogICAgICB2YXIgZ3JhcGggPSB0aGlzLmdyYXBoLmVkaXRvci5ncmFwaDsKICAgICAgdmFyIHBhcmVudCA9IGdyYXBoLmdldERlZmF1bHRQYXJlbnQoKTsgLy8g5Zu+5omA5pyJ6IqC54K5CgogICAgICB2YXIgY2VsbHMgPSBfLm1hcChncmFwaC5nZXRDaGlsZFZlcnRpY2VzKHBhcmVudCksIGZ1bmN0aW9uICh2KSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGdpZDogdi5pZCwKICAgICAgICAgIG5hbWU6IHYudmFsdWUKICAgICAgICB9OwogICAgICB9KTsKCiAgICAgIHRoaXMubTMuY2FsbEZTKCIvbWF0cml4L20zZ3JhcGgvZ3JhcGhfaW1hcF9kYXRhLmpzIiwgZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNlbGxzKSkpLnRoZW4oZnVuY3Rpb24gKHJ0bikgewogICAgICAgIGdyYXBoLmdldE1vZGVsKCkuYmVnaW5VcGRhdGUoKTsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIF8uZm9yRWFjaChydG4ubWVzc2FnZSwgZnVuY3Rpb24gKHYpIHsKICAgICAgICAgICAgdmFyIGlkID0gdi5naWQ7CiAgICAgICAgICAgIHZhciBzdGF0dXMgPSB2LnN0YXR1czsKICAgICAgICAgICAgdmFyIGNlbGwgPSBncmFwaC5nZXRNb2RlbCgpLmdldENlbGwoaWQpOyAvL2xldCBzdGF0ZSA9IGdyYXBoLnZpZXcuZ2V0U3RhdGUoY2VsbCk7CgogICAgICAgICAgICBpZiAoY2VsbCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgLy8gUmVzZXRzCiAgICAgICAgICAgICAgZ3JhcGgucmVtb3ZlQ2VsbE92ZXJsYXlzKGNlbGwpOwoKICAgICAgICAgICAgICBpZiAoc3RhdHVzID49IDUpIHsKICAgICAgICAgICAgICAgIGdyYXBoLmFkZENlbGxPdmVybGF5KGNlbGwsIF90aGlzMTEuY3JlYXRlT3ZlcmxheUJ5VGlwKHN0YXR1cywgIiIuY29uY2F0KGlkLCAiOiBcdTkxQ0RcdTU5MjdcdTU0NEFcdThCNjYiKSkpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID4gMyAmJiBzdGF0dXMgPCA1KSB7CiAgICAgICAgICAgICAgICBncmFwaC5hZGRDZWxsT3ZlcmxheShjZWxsLCBfdGhpczExLmNyZWF0ZU92ZXJsYXlCeVRpcChzdGF0dXMsICIiLmNvbmNhdChpZCwgIjogXHU0RTI1XHU5MUNEXHU1NDRBXHU4QjY2IikpKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZ3JhcGgucmVtb3ZlQ2VsbE92ZXJsYXlzKGNlbGwpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGdyYXBoLmdldE1vZGVsKCkuZW5kVXBkYXRlKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICAvLyDoioLngrnnirbmgIHmuLLmn5Plm77moIcKICAgIGNyZWF0ZU92ZXJsYXlCeVRpcDogZnVuY3Rpb24gY3JlYXRlT3ZlcmxheUJ5VGlwKGltYWdlLCB0b29sdGlwKSB7CiAgICAgIHZhciBvdmVybGF5ID0gbmV3IG14Q2VsbE92ZXJsYXkobmV3IG14SW1hZ2UoIi9zdGF0aWMvYXNzZXRzL2ltYWdlcy9hcHBzL3BuZy9zZXZlcml0eS8iLmNvbmNhdChpbWFnZSwgIi5wbmciKSwgMjQsIDI0KSwgdG9vbHRpcCwgbXhDb25zdGFudHMuQUxJR05fUklHSFQsIG14Q29uc3RhbnRzLkFMSUdOX1RPUCwgbmV3IG14UG9pbnQoLTEwLCAxNSkpOwogICAgICByZXR1cm4gb3ZlcmxheTsKICAgIH0sCiAgICAvLyDliKDpmaTpgInmi6nnmoToioLngrkKICAgIG9uRGVsZXRlU2VsZWN0ZWRDZWxsczogZnVuY3Rpb24gb25EZWxldGVTZWxlY3RlZENlbGxzKGdyYXBoLCBpbmNsdWRlRWRnZXMpIHsKICAgICAgLy8gQ2FuY2VscyBpbnRlcmFjdGl2ZSBvcGVyYXRpb25zCiAgICAgIGdyYXBoLmVzY2FwZSgpOwogICAgICB2YXIgY2VsbHMgPSBncmFwaC5nZXREZWxldGFibGVDZWxscyhncmFwaC5nZXRTZWxlY3Rpb25DZWxscygpKTsKCiAgICAgIGlmIChjZWxscyAhPSBudWxsICYmIGNlbGxzLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgcGFyZW50cyA9IGdyYXBoLm1vZGVsLmdldFBhcmVudHMoY2VsbHMpOwogICAgICAgIGdyYXBoLnJlbW92ZUNlbGxzKGNlbGxzLCBpbmNsdWRlRWRnZXMpOyAvLyBTZWxlY3RzIHBhcmVudHMgZm9yIGVhc2llciBlZGl0aW5nIG9mIGdyb3VwcwoKICAgICAgICBpZiAocGFyZW50cyAhPSBudWxsKSB7CiAgICAgICAgICB2YXIgc2VsZWN0ID0gW107CgogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChncmFwaC5tb2RlbC5jb250YWlucyhwYXJlbnRzW2ldKSAmJiAoZ3JhcGgubW9kZWwuaXNWZXJ0ZXgocGFyZW50c1tpXSkgfHwgZ3JhcGgubW9kZWwuaXNFZGdlKHBhcmVudHNbaV0pKSkgewogICAgICAgICAgICAgIHNlbGVjdC5wdXNoKHBhcmVudHNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgZ3JhcGguc2V0U2VsZWN0aW9uQ2VsbHMoc2VsZWN0KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAvLyDoioLngrnpq5jkuq7lrprkvY3mmL7npLoKICAgIG9uQ2VsbFBvc2l0aW9uOiBmdW5jdGlvbiBvbkNlbGxQb3NpdGlvbihyb3csIGhGbGFnLCB2RmxhZykgewogICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7CgogICAgICB2YXIgaWQgPSByb3cuZW50aXR5OwogICAgICB2YXIgZWRpdG9yID0gdGhpcy5ncmFwaC5lZGl0b3I7CiAgICAgIHZhciBncmFwaCA9IGVkaXRvci5ncmFwaDsKICAgICAgdmFyIGNlbGwgPSBncmFwaC5nZXRNb2RlbCgpLmdldENlbGwoaWQpOwoKICAgICAgdHJ5IHsKICAgICAgICAvLyDmoLnmja5jZWxs5pWw6YeP5Yaz5a6a6KeG5Zu+5piv5ZCm57yp5pS+CiAgICAgICAgaWYgKHRoaXMuZ3JhcGguZGF0YS5ub2Rlcy5sZW5ndGggPiAxMCkgewogICAgICAgICAgZWRpdG9yLmV4ZWN1dGUoImZpdCIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBlZGl0b3IuZXhlY3V0ZSgiYWN0dWFsU2l6ZSIpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGNvbnRhaW5lclcgPSBncmFwaC5jb250YWluZXIuY2xpZW50V2lkdGg7CiAgICAgICAgdmFyIGNvbnRhaW5lckggPSBncmFwaC5jb250YWluZXIuY2xpZW50SGVpZ2h0OwogICAgICAgIHZhciB4ID0gLWNlbGwuZ2VvbWV0cnkueCArIChjb250YWluZXJXIC0gY2VsbC5nZW9tZXRyeS53aWR0aCkgLyAyOwogICAgICAgIHZhciB5ID0gLWNlbGwuZ2VvbWV0cnkueSArIChjb250YWluZXJIIC0gY2VsbC5nZW9tZXRyeS5oZWlnaHQpIC8gMjsKCiAgICAgICAgaWYgKGhGbGFnKSB7CiAgICAgICAgICB4ID0geCAvIDI7CiAgICAgICAgfQoKICAgICAgICBpZiAodkZsYWcpIHsKICAgICAgICAgIHkgPSB5IC8gMjsKICAgICAgICB9CgogICAgICAgIGdyYXBoLmdldFZpZXcoKS5zZXRUcmFuc2xhdGUoeCwgeSk7CiAgICAgICAgZ3JhcGguc2Nyb2xsQ2VsbFRvVmlzaWJsZShjZWxsKTsKICAgICAgICBncmFwaC5zZXRTZWxlY3Rpb25DZWxscyhbY2VsbF0pOwoKICAgICAgICBfLmRlbGF5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBzdGF0ZSA9IGdyYXBoLnZpZXcuZ2V0U3RhdGUoY2VsbCk7CgogICAgICAgICAgaWYgKF90aGlzMTIuZ3JhcGguY29udHJvbC5pZkljb24pIHsKICAgICAgICAgICAgc3RhdGUuc2hhcGUubm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaW1hZ2UiKVswXS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2FuaW1hdGVkIGZsYXNoJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdGF0ZS5zaGFwZS5ub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJlbGxpcHNlIilbMF0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdhbmltYXRlZCBmbGFzaCcpOwogICAgICAgICAgfQogICAgICAgIH0sIDUwMCk7IC8vIOmAieaLqeiKgueCueeqgeWHuuaYvuekugoKCiAgICAgICAgZ3JhcGguc2V0Q2VsbFN0eWxlcyhteENvbnN0YW50cy5TVFlMRV9QRVJJTUVURVJfU1BBQ0lORywgOCwgW2NlbGxdKTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgLy8g5b2T5YmN55S75biD5Lit5LiN5YyF5ZCr6K+l5a6e5L2TCiAgICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAiaW5mbyIsCiAgICAgICAgICBtZXNzYWdlOiAi5rKh5pyJ6K+l5a6e5L2TICIKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIC8vIOeUu+W4g+a4heepugogICAgb25DYW52YXNDbGVhcjogZnVuY3Rpb24gb25DYW52YXNDbGVhcigpIHsKICAgICAgdGhpcy5ncmFwaC5lZGl0b3IuZXhlY3V0ZSgic2VsZWN0QWxsIik7CiAgICAgIHRoaXMuZ3JhcGguZWRpdG9yLmV4ZWN1dGUoImRlbGV0ZSIpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["GraphHandler.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\n  <el-container ref=\"container\">\n    <el-header style=\"height:40px;line-height:40px;padding:0px;text-align:right;\">\n        <el-popover\n            placement=\"left\"\n            trigger=\"click\"\n            popper-class=\"info-popper\">\n            <el-container>\n                <el-main style=\"padding:0px;\">\n                    <el-tabs value=\"setup\">\n                        <el-tab-pane label=\"设置\" name=\"setup\">\n                            <el-form>\n                                <el-form-item label=\"工具栏\">\n                                    <el-switch\n                                        v-model=\"graph.control.toolbar.show\"\n                                        active-color=\"#13ce66\"\n                                        inactive-color=\"#dddddd\">\n                                    </el-switch>\n                                </el-form-item>\n                                <el-form-item label=\"自动刷新\">\n                                    <el-switch\n                                        v-model=\"graph.control.refresh.enable\"\n                                        active-color=\"#13ce66\"\n                                        inactive-color=\"#dddddd\"\n                                        @change=\"onRefreshChange\">\n                                    </el-switch>\n                                </el-form-item>\n                                <el-form-item label=\"手动刷新\">\n                                    <el-button type=\"text\"><i class=\"el-icon-refresh\" @click=\"onRefreshCellStatus\"></i></el-button>\n                                </el-form-item>\n                                <el-form-item label=\"预览视图\">\n                                    <el-switch\n                                        v-model=\"graph.control.outline.show\"\n                                        active-color=\"#13ce66\"\n                                        inactive-color=\"#dddddd\"\n                                        @change=\"onToggleOutline\">\n                                    </el-switch>\n                                </el-form-item>\n                            </el-form>\n                        </el-tab-pane>\n                        <el-tab-pane label=\"节点\" name=\"vertex\">\n                            <el-form>\n                                <el-form-item label=\"排列\">\n                                    \n                                </el-form-item>\n                            </el-form>\n                        </el-tab-pane>\n                        <el-tab-pane label=\"边线\" name=\"edge\">\n                            <el-form>\n                                <el-form-item label=\"样式\">\n                                    \n                                </el-form-item>\n                            </el-form>\n                        </el-tab-pane>\n                    </el-tabs>\n                </el-main>\n            </el-container>\n            <el-button type=\"text\" slot=\"reference\">\n                <i class=\"el-icon-setting\" style=\"font-size:15px;margin:0 5px;\"></i>\n            </el-button>\n        </el-popover>\n    </el-header>\n    <el-main id=\"graphContainer\" ref=\"graphContainer\" style=\"width:100vw;height:100vh;min-width:100vw;position:releative;overflow:hidden;padding:0px;\"></el-main>\n    <div ref=\"outlineContainer\"\n        class=\"outlineContainer\"\n        v-show=\"graph.control.outline.show\"\n        draggable=\"true\">\n    </div>\n  </el-container>\n\n</template>\n\n<script>\nimport 'mxgraph/javascript/src/css/common.css';\n\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport mxgraph from './mxGraph.js';\nconst {mxEditor,mxGraph,mxConstants,mxPanningHandler,mxGraphHandler,mxGuide,mxEdgeHandler,mxClient,mxRectangleShape,mxRubberband,mxCellOverlay,mxOutline,mxImage,mxPoint,mxEdgeStyle,mxCellTracker,mxUtils,mxCodec,mxEvent,mxHierarchicalLayout,mxMorphing,mxFastOrganicLayout,mxCompactTreeLayout,mxCircleLayout} = mxgraph;\n\nexport default {\n  name: \"GraphView\",\n  props: {\n    graphData: Object,\n    global: Object\n  },\n  data() {\n    return {\n      graph: {\n            editor:null,\n            data: {\n                nodes: [],\n                edges: []\n            },\n            control:{\n                ifIcon: true,\n                outline: {\n                    show: true,\n                    inst: null\n                },\n                toolbar:{\n                    show: false\n                },\n                refresh:{\n                    inst: null,\n                    enable: false,\n                    interval: 15*1000\n                }\n            },\n            layout: {\n                default: 'hierarchical_vertical'\n            },\n            style: {\n                grid: {\n                    show: false\n                },\n                vertex:{\n                    align: {\n                        value: '',\n                        list: [\n                            {name: '左对齐', icon:'', value:'mxConstants.ALIGN_LEFT'},\n                            {name: '居中', icon:'', value:'mxConstants.ALIGN_CENTER'},\n                            {name: '右对齐', icon:'', value:'mxConstants.ALIGN_RIGHT'},\n                            {name: '上对齐', icon:'', value:'mxConstants.ALIGN_TOP'},\n                            {name: '中间', icon:'', value:'mxConstants.ALIGN_MIDDLE'},\n                            {name: '下对齐', icon:'', value:'mxConstants.ALIGN_BOTTOM'}\n                        ]\n                    }\n                },\n                edge: {\n                    endArrow: 'classic',\n                    strokeWidth: 1,\n                    strokeColor: '#333333',\n                    value: {\n                            name: 'isometric1', cnTitle:'等距1', title:'isometricEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['isometricEdgeStyle', null, null, null]\n                        },\n                    list: [\n                        {\n                            name: 'straight', cnTitle:'直线', title:'isometricEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:[null, null, null]\n                        },\n                        {\n                            name: 'orthogonal', cnTitle:'正交', title:'orthogonalEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['orthogonalEdgeStyle', null, null]\n                        },\n                        {\n                            name: 'simple1', cnTitle:'简单1', title:'elbowEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['elbowEdgeStyle', null, null, null]\n                        },\n                        {\n                            name: 'simple2', cnTitle:'简单2', title:'elbowEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['elbowEdgeStyle', 'vertical', null, null]\n                        },\n                        {\n                            name: 'isometric1', cnTitle:'等距1', title:'isometricEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['isometricEdgeStyle', null, null, null]\n                        },\n                        {\n                            name: 'isometric2', cnTitle:'等距2', title:'isometricEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['isometricEdgeStyle', 'vertical', null, null]\n                        },\n                        {\n                            name: 'entityRelation', cnTitle:'实体关联', title:'entityRelationEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['entityRelationEdgeStyle', null, null]\n                        }\n                    ]\n                }\n            },\n            path: {\n                list:[],\n                colors:['#ff0000','#ffd700','#666666','#00ffff','#40e0d0','#ff7373','#d3ffce','#3399ff','#000080','#66cccc','#a0db8e','#794044','#6897bb','#cc0000'],\n            },\n            edges: {\n                value: \"\",\n                list: [],\n                properties: {\n                    value: \"\",\n                    list: []\n                }\n            }\n      }\n    };\n  },\n  watch: {\n        graphData:{\n          handler(){\n              this.setGraphData();\n          },\n          immediate: true\n        },\n        'graph.control.refresh.enable':{\n            handler(val){\n                if(val) {\n                    this.graph.control.refresh.inst = setInterval(()=>{\n                        this.onRefreshCellStatus();\n                    },this.graph.control.refresh.interval);\n                    this.$message({\n                        type: \"info\",\n                        message: \"自动刷新开启\"\n                    })\n                } else {\n                    clearInterval(this.graph.control.refresh.inst);\n                    this.$message({\n                        type: \"info\",\n                        message: \"自动刷新关闭\"\n                    })\n                }\n            },\n            immediate:true\n        },\n  },\n  created(){\n    this.init();\n  },\n  mounted(){\n\n      this.initGraph();\n\n      this.eventHub.$on(\"graph-position\",(v)=>{\n          this.onCellPosition(v.row,v.hFlag,v.vFlag);\n      })\n\n  },\n  methods: {\n    // 初始化\n    init(){\n        this.m3.callFS(\"/matrix/m3graph/edges.js\",null).then( (rtn)=>{\n            this.graph.edges.list = rtn.message;\n        } );\n\n        // 状态刷新标志\n        this.graph.control.refresh.enable = (localStorage.getItem(\"GRAPH-STATUS-IFREFRESH\") == 'true');\n\n        // 节点是否可以移动 \n        mxGraphHandler.prototype.setMoveEnabled(true);\n        //显示节点位置标尺  \n        mxGraphHandler.prototype.guidesEnabled = true;\n\n        // Alt disables guides\n        mxGuide.prototype.isEnabledForEvent = function(evt){\n            return !mxEvent.isAltDown(evt);\n        };\n\n        // Enables snapping waypoints to terminals\n        mxEdgeHandler.prototype.snapToTerminals = true;\n\n    },\n    // 加载图数据\n    setGraphData(){\n        \n        if(_.isEmpty(this.graphData)) {\n            return false;\n        } else {\n            this.graph.data = this.graphData;\n            this.onReload();\n        }\n    },\n    // 初始化图板\n    initGraph(){\n        \n        this.graph.editor = new mxEditor();\n        this.graph.editor.setGraphContainer(this.$refs.graphContainer.$el);\n        let graph = this.graph.editor.graph;\n\n        // 是否允许平移。true：表示按住Shift+左键拖动时，整个graph移动；\n        // false：按住Shift+左键拖动时，选中的图形水平方向或者垂直方向平移。\n        graph.setPanning(true);\n        mxPanningHandler.prototype.isPanningTrigger = function() {\n            return true;\n        };\n\n        // 禁止改变节点大小\n        graph.setCellsResizable(false);\n        // 禁止节点文字编辑功能\n        graph.setCellsEditable(false);\n        \n        // 禁止连线移动\n        graph.disconnectOnMove = false;\n        \n\n        // 允许连线的目标和源是同一元素 \n        graph.setAllowLoops(true); \n        // 居中缩放\n        graph.centerZoom = true;\n        // Tooltips on touch devices\n        graph.setTooltips(!mxClient.IS_TOUCH);\n        // 支持Html\n        graph.setHtmlLabels(true);\n\n        // 去锯齿效果\n        mxRectangleShape.prototype.crisp = true;\n\n        // 鼠标框选\n        new mxRubberband(graph);\n        \n        // 预览时鼠标悬浮到节点时，改变鼠标样式\n        graph.getCursorForCell = function(cell){\n            if (cell != null && cell.value != null && cell.vertex ==1 ){\n                return 'pointer';\n            }\n        }\n        \n        // 预览时鼠标悬浮到节点时，改变节点样式\n        new mxCellTracker(graph);\n\n        // Sets global styles\n        var style = graph.getStylesheet().getDefaultEdgeStyle();\n        style[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n        style[mxConstants.STYLE_ROUNDED] = true;\n        style[mxConstants.EDGE_SELECTION_STROKEWIDTH] = 3;\n        style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR] = 'transparent';\n        style[mxConstants.STYLE_LABEL_PADDING] = 5;\n\n\n        style = graph.getStylesheet().getDefaultVertexStyle();\n        style[mxConstants.STYLE_FILLCOLOR] = '#2f8ee7';\n        style[mxConstants.STYLE_FONTCOLOR] = '#333333';\n        style[mxConstants.STYLE_FONTSIZE] = '14';\n        style[mxConstants.STYLE_SHAPE] = 'swimlane';\n        style[mxConstants.STYLE_SPACING] = '10';\n        style[mxConstants.STYLE_STARTSIZE] = 30;\n        style[mxConstants.STYLE_GRADIENTCOLOR] = '#419efe';\n        style[mxConstants.VERTEX_SELECTION_STROKEWIDTH] = 3;\n        style[mxConstants.VERTEX_SELECTION_COLOR] = '#ff0000';\n\n        // 预览时鼠标悬浮到节点时，改变节点样式\n        new mxCellTracker(graph);\n\n        // 首先禁用浏览器右键菜单\n        mxEvent.disableContextMenu(this.$el);\n        // 右键菜单\n        graph.popupMenuHandler.factoryMethod = (menu, cell, evt)=>{\n            this.createPopupMenu(this.graph.editor, graph, menu, cell, evt);\n        };\n\n        this.initGraphEvent(graph);\n\n    },\n    initGraphEvent(graph){\n        // 初始化滚轮图缩放事件监听\n        this.addScrollListener(graph);\n\n        // Add the source vertex\n        graph.addListener(mxEvent.ADD_CELLS, _.debounce(()=> {\n            this.onRefreshCellStatus();\n        }),1000);\n\n        // 初始化鹰眼视图\n        this.onInitOutline(graph);\n\n        // 监听拖拽事件\n        let container = this.$refs.graphContainer.$el;\n        mxEvent.addListener(container, 'dragover', (evt)=>{\n            if (graph.isEnabled()){\n                evt.stopPropagation();\n                evt.preventDefault();\n            }\n        });\n        // 监听拖入事件\n        mxEvent.addListener(container, 'drop', (evt)=>{\n            \n            if (graph.isEnabled()){\n                evt.stopPropagation();\n                evt.preventDefault();\n\n                // Gets drop location point for vertex\n                var pt = mxUtils.convertPoint(graph.container, mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n                var tr = graph.view.translate;\n                var scale = graph.view.scale;\n                var x = pt.x / scale - tr.x;\n                var y = pt.y / scale - tr.y;\n                \n                // Converts local entity to graph cell\n                let addCellToGraph = (items)=>{\n                    \n                    graph.getModel().beginUpdate();\n\n                    try{\n\n                        graph.getModel();\n                        let parent = graph.getDefaultParent();\n\n                        _.forEach(items,(v)=>{\n                            \n                            let cell = graph.getModel().getCell(v.id);\n\n                            if(cell){\n                                this.$message({\n                                    type: \"info\",\n                                    message: \"已有该实体\"\n                                })\n                                return;\n                            }\n\n                            let type = v.icon || 'matrix';\n\n                            // 可设置默认显示属性\n                            let name =  '';\n                            \n                            try{\n                                if(window.URL_PARAMS_GRAPH){\n                                    name = v[window.URL_PARAMS_GRAPH.title];\n                                } else {\n                                    name = v[this.model.graph.default.title];\n                                }\n                            } catch(err){\n                                name = v[\"id\"];\n                            }\n\n                            let imageUrl = this.imageRenderHandler(type);\n\n                            if(this.graph.control.ifIcon){\n                                if(this.checkImgExists(`${type}.png`)){\n                                    cell = graph.insertVertex(parent, v.id, name, x, y, 60, 60,`shape=image;html=1;image=${imageUrl};verticalLabelPosition=bottom;verticalAlign=top;`);\n                                } else {\n                                    cell = graph.insertVertex(parent, v.id, name, x, y, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                                }    \n                            } \n                            // shape渲染\n                            else {\n                                cell = graph.insertVertex(parent, v.id, name, x, y, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                            }\n\n                            // 定位到cell\n                            setTimeout(()=>{\n                                graph.scrollCellToVisible(cell);\n                                graph.setSelectionCell(cell);\n                            },1000)\n\n                        })\n                    \n                        \n                    } catch(err){\n                        console.error(err);\n                    } finally {\n                        graph.getModel().endUpdate();\n\n                        this.$emit(\"control-show\",false);\n                    }\n                };\n    \n                var items = [JSON.parse(evt.dataTransfer.getData(\"Text\"))];\n\n                addCellToGraph(items);\n            }\n        });\n\n    },\n    // 滚轮缩放事件监听\n    addScrollListener(graph){\n        var t = (function a(element, wheelHandle) {\n                if (typeof element != 'object') return;\n                if (typeof wheelHandle != 'function') return;\n\n                // 监测浏览器\n                if (typeof a.browser == 'undefined') {\n                    var user = navigator.userAgent;\n                    var b = {};\n                    b.opera = user.indexOf(\"Opera\") > -1 && typeof window.opera == \"object\";\n                    b.khtml = (user.indexOf(\"KHTML\") > -1 || user.indexOf(\"AppleWebKit\") > -1 || user.indexOf(\"Konqueror\") > -1) && !b.opera;\n                    b.ie = user.indexOf(\"MSIE\") > -1 && !b.opera;\n                    b.gecko = user.indexOf(\"Gecko\") > -1 && !b.khtml;\n                    a.browser = b;\n                }\n                if (element == window)\n                    element = document;\n                if (a.browser.ie)\n                    element.attachEvent('onmousewheel', wheelHandle);\n                else\n                    element.addEventListener(a.browser.gecko ? 'DOMMouseScroll' : 'mousewheel', wheelHandle, false);\n        });\n        t(graph.container, this.wheelHandle);\n    },\n    // 滚轮缩放图\n    wheelHandle(e) {\n        var upcheck;\n\n        if (e.wheelDelta) {\n            upcheck = e.wheelDelta > 0 ? 1 : 0;\n        } else {\n            upcheck = e.detail < 0 ? 1 : 0;\n        }\n        if (upcheck) {\n            this.graph.editor.graph.zoomIn();\n        }\n        else {\n            this.graph.editor.graph.zoomOut();\n        }\n\n        if (window.event) {\n            e.returnValue = false;\n            window.event.cancelBubble = true;\n        } else {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    },\n    checkImgExists(){\n        //let term = {parent:\"/assets/images/entity/png\", name:name};\n        return true;//fsHandler.callFsJScript(\"/matrix/m3graph/checkHaveFile.js\", encodeURIComponent(JSON.stringify(term))).message;\n    },  \n    // 渲染图片来源\n    imageRenderHandler(icon) {\n        \n        if(_.includes(icon,'http://')){\n            return icon;\n        } else {\n            return `/static/assets/images/entity/png/${icon}.png`;\n        }\n\n    },\n    // 切换预览\n    onInitOutline(graph){\n        new mxOutline(graph, this.$refs.outlineContainer);\n    },\n    onToggleOutline(val){\n        this.graph.control.outline.show = val;\n    },\n    // 自动刷新控制\n    onRefreshChange(val){\n        this.onRefreshCellStatus();\n        this.graph.control.refresh.enable = val;\n        localStorage.setItem(\"GRAPH-STATUS-IFREFRESH\", this.graph.control.refresh.enable);\n    },\n    // 定位图节点\n    onPosition(id,hFlag,vFlag){\n                \n        let editor = this.graph.editor; \n        let graph = editor.graph;\n        let cell = graph.getModel().getCell(id);\n\n        try{\n            // 恢复图实际大小\n            editor.execute(\"actualSize\");    \n            \n            let containerW = graph.container.clientWidth;\n            let containerH = graph.container.clientHeight;\n            let x =-cell.geometry.x + ( containerW - cell.geometry.width) / 2;\n            let y =-cell.geometry.y + ( containerH - cell.geometry.height) / 2;\n            \n            if( hFlag ){\n                x = x / 2;\n            }\n\n            if( vFlag ){\n                y = y / 2;\n            }\n            \n            graph.getView().setTranslate(x,y);\n            graph.scrollCellToVisible(cell);\n            graph.setSelectionCells([cell]);\n\n            _.delay(()=>{\n                let state = graph.view.getState(cell);\n                \n                if(this.model.control.ifIcon){\n                    state.shape.node.getElementsByTagName(\"image\")[0].setAttribute('class', 'animated flash');\n                } else {\n                    state.shape.node.getElementsByTagName(\"ellipse\")[0].setAttribute('class', 'animated flash');\n                }\n            },500)\n\n            // 选择节点突出显示\n            graph.setCellStyles(mxConstants.STYLE_PERIMETER_SPACING, 8, [cell]);\n            \n        } catch(err){\n            \n            // 当前画布中不包含该实体\n            this.$message({\n                type: \"info\",\n                message: \"画布没有该实体 \"\n            })\n        }\n        \n    },\n    // 图自适应并居中显示\n    onGraphToCenter(immediate){\n        const self = this;\n\n        let editor = this.graph.editor;\n        let graph = editor.graph;\n        let parent = graph.getDefaultParent();\n        let limit = 30;  // 当前画布节点数量阈值\n        let topCell = graph.findTreeRoots(parent)[0];\n        \n        // 获取当前选择节点 \n        // 针对加载子图的场景\n        // 最顶层节点  graph.center(true,true,0,0.5);\n        // 子节点  graph.center(true,true,0.5,0.5);\n        let toCenter = function(){\n            let selectionCell = graph.getSelectionCell();\n            let allCells = graph.getChildVertices(parent);\n            \n            if( allCells.length > limit){\n                // 图自适应\n                editor.execute(\"fit\");\n                editor.execute(\"actualSize\"); \n            } else {\n                // 图实际大小\n                editor.execute(\"actualSize\"); \n            }\n\n            // 没有选择节点\n            if( selectionCell == null ){\n                \n                graph.center(true,true,0.5,0.5);  // middle-center\n\n            } else {\n                \n                // 选择了最顶层节点\n                if( selectionCell == topCell ){\n                    graph.center(true,true,0,0.5); // top-center\n                    // 定位选择节点\n                    self.onPosition(selectionCell.getId(), true, true);\n                } \n                // 选择了子节点\n                else {\n                    graph.center(true,true,0.5,0.5);  // middle-center\n                    // 定位选择节点\n                    self.onPosition(selectionCell.getId(), true, true);\n                }\n            }\n\n            //graph.clearSelection();\n            \n        }\n\n        if(immediate){\n            editor.execute(\"fit\");\n            toCenter();\n        } else {\n            let loadSvg = function(){\n                try{\n                    let rtn = graph.getChildEdges(parent);\n                    \n                    if(_.size(rtn) > 0){\n                        return true;\n                    } else {\n                        return false;\n                    }\n                    \n                } catch(err){\n                    return false\n                }\n            };\n            \n            if(loadSvg()) {\n                setTimeout(()=>{\n                    editor.execute(\"fit\");\n                    toCenter();\n                },500)\n            } else {\n                setTimeout(loadSvg, 50);\n            }   \n        }\n    },\n    onReload(){\n        try{\n            $(this.$refs.graphContainer.$el).empty();\n            \n            // 清空\n            this.graph.editor.execute(\"selectAll\");\n            this.graph.editor.execute(\"delete\");\n\n            // 重新初始化\n            this.initGraph();\n\n        } catch(err){\n\n            this.initGraph();\n\n        } finally{\n            \n            this.renderGraph(this.graph.editor);\n\n        }\n    },\n    // 图绘制\n    renderGraph(editor){\n        \n        let graph = editor.graph;\n        let model = graph.getModel();\n        let parent = graph.getDefaultParent();\n\n        model.beginUpdate();\n        \n        try{\n            \n\n            if(!_.isEmpty(window.URL_PARAMS_ITEM)) {\n                let doc = mxUtils.parseXml(this.graph.data);\n                let codec = new mxCodec(doc);\n                codec.decode(doc.documentElement, model);\n            } else {\n                \n                \n                let allNodes = _.concat([],this.graph.data.nodes);\n                let allEdges = _.concat([],this.graph.data.edges);\n\n                if( this.graph.data['diff'] && 'add' in this.graph.data['diff'] ){\n                    allNodes = _.concat(allNodes, this.graph.data.diff.add.nodes);\n                    allEdges = _.concat(allEdges, this.graph.data.diff.add.edges);\n                }\n\n                if( this.graph.data['diff'] && 'del' in this.graph.data['diff'] ){\n                    allNodes = _.concat(allNodes, this.graph.data.diff.del.nodes);\n                    allEdges = _.concat(allEdges, this.graph.data.diff.del.edges);\n                }\n\n                allNodes = _.uniqBy(allNodes,'id');\n                allEdges = _.uniqBy(allEdges,'id'); \n                \n                // 绘制节点\n                _.forEach(allNodes,(v)=>{\n\n                    let _type = v._icon || 'matrix';\n\n                    // 可设置默认显示属性\n                    let _name =  '';\n\n                    try{\n                        if(window.URL_PARAMS_GRAPH){\n                            _name = v[window.URL_PARAMS_GRAPH.title];\n                        } else {\n                            _name = v[this.model.graph.default.title];\n                        }\n                    } catch(err){\n                        _name = v[\"id\"];\n                    }\n\n                    // 选择节点渲染模式：icon/shape\n                    let imageUrl = this.imageRenderHandler(_type);\n\n                    // icon渲染\n                    if(this.graph.control.ifIcon){\n                        if(this.checkImgExists(`${_type}.png`)){\n                            graph.insertVertex(parent, v.id, _name, 50, 50, 60, 60,`shape=image;html=1;image=${imageUrl};verticalLabelPosition=bottom;verticalAlign=top;`);\n                        } else {\n                            graph.insertVertex(parent, v.id, _name, 50, 50, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                        }    \n                    } \n                    // shape渲染\n                    else {\n                        graph.insertVertex(parent, v.id, _name, 50, 50, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                    }\n                })\n                \n                // 绘制边\n                _.forEach(allEdges,(k,index)=>{\n                    \n                    let source = model.getCell(k.source);\n                    let target = model.getCell(k.target);\n                    \n                    let baseEdgeStyle = `edgeStyle=${this.graph.style.edge.value.title};html=1;rounded=1;jettySize=auto;orthogonalLoop=1;endArrow=block;endFill=1;`;\n                    let direction = '';\n\n                    if(k.twoway){\n                        direction = 'startArrow=block;endArrow=block;endFill=1;';\n                    }\n\n                    // edge为path的样式\n                    if(k.class === \"path\"){\n                        baseEdgeStyle = `edgeStyle=${this.graph.style.edge.value.title};orthogonalLoop=1;strokeWidth=1;dashed=1;startFill=0;endArrow=none;endFill=0;startArrow=none;orthogonal=1;elbow=vertical;`;\n                        let strokeColor = this.model.graph.path.colors[index] || _.sample(this.graph.path.colors);\n                        graph.insertEdge(parent, k.id, k.class, source, target, baseEdgeStyle+direction+`strokeColor=${strokeColor}`);\n                        return;\n                    }\n\n                    \n                    try {\n                        let edgeName = _.find(this.graph.edges.list,{name:k.class}).remedy;\n                        graph.insertEdge(parent, k.id, edgeName, source, target, baseEdgeStyle+direction);\n                    } catch(err){\n                        graph.insertEdge(parent, k.id, k.class, source, target, baseEdgeStyle+direction);\n                    } \n                })\n                \n            }\n            \n        }\n        finally {\n            \n            model.endUpdate();    \n\n            this.executeLayout();\n\n            setTimeout(()=>{\n                this.onGraphToCenter(true);\n            },500)\n\n        }\n    },\n    renderAndMergeGraph(editor){\n        \n        let graph = new mxGraph();\n        let parent = graph.getDefaultParent();\n        let model = graph.getModel();\n\n        model.beginUpdate();\n        \n        try{\n            \n\n            if(!_.isEmpty(window.URL_PARAMS_ITEM)) {\n                let doc = mxUtils.parseXml(this.graph.data);\n                let codec = new mxCodec(doc);\n                codec.decode(doc.documentElement, model);\n            } else {\n                \n                \n                let allNodes = _.concat([],this.graph.data.nodes);\n                let allEdges = _.concat([],this.graph.data.edges);\n\n                if( this.graph.data['diff'] && 'add' in this.graph.data['diff'] ){\n                    allNodes = _.concat(allNodes, this.graph.data.diff.add.nodes);\n                    allEdges = _.concat(allEdges, this.graph.data.diff.add.edges);\n                }\n\n                if( this.graph.data['diff'] && 'del' in this.graph.data['diff'] ){\n                    allNodes = _.concat(allNodes, this.graph.data.diff.del.nodes);\n                    allEdges = _.concat(allEdges, this.graph.data.diff.del.edges);\n                }\n\n                allNodes = _.uniqBy(allNodes,'id');\n                allEdges = _.uniqBy(allEdges,'id'); \n                \n                // 绘制节点\n                _.forEach(allNodes,(v)=>{\n\n                    let type = v._icon || 'matrix';\n\n                    // 可设置默认显示属性\n                    let name =  '';\n\n                    try{\n                        if(window.URL_PARAMS_GRAPH){\n                            name = v[window.URL_PARAMS_GRAPH.title];\n                        } else {\n                            name = v[this.model.graph.default.title];\n                        }\n                    } catch(err){\n                        name = v[\"id\"];\n                    }\n\n                    // 选择节点渲染模式：icon/shape\n                    let imageUrl = this.imageRenderHandler(type);\n\n                    // icon渲染\n                    if(this.graph.control.ifIcon){\n                        if(this.checkImgExists(`${type}.png`)){\n                            graph.insertVertex(parent, v.id, name, 50, 50, 60, 60,`shape=image;html=1;image=${imageUrl};verticalLabelPosition=bottom;verticalAlign=top;`);\n                        } else {\n                            graph.insertVertex(parent, v.id, name, 50, 50, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                        }    \n                    } \n                    // shape渲染\n                    else {\n                        graph.insertVertex(parent, v.id, name, 50, 50, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                    }\n                })\n                \n                // 绘制边\n                _.forEach(allEdges,(k,index)=>{\n                    \n                    let source = model.getCell(k.source);\n                    let target = model.getCell(k.target);\n                    \n                    let baseEdgeStyle = `edgeStyle=${this.graph.style.edge.value.title};html=1;rounded=1;jettySize=auto;orthogonalLoop=1;endArrow=block;endFill=1;`;\n                    let direction = '';\n\n                    if(k.twoway){\n                        direction = 'startArrow=block;endArrow=block;endFill=1;';\n                    }\n\n                    // edge为path的样式\n                    if(k.class === \"path\"){\n                        baseEdgeStyle = `edgeStyle=${this.graph.style.edge.value.title};orthogonalLoop=1;strokeWidth=1;dashed=1;startFill=0;endArrow=none;endFill=0;startArrow=none;orthogonal=1;elbow=vertical;`;\n                        let strokeColor = this.model.graph.path.colors[index] || _.sample(this.graph.path.colors);\n                        graph.insertEdge(parent, k.id, k.class, source, target, baseEdgeStyle+direction+`strokeColor=${strokeColor}`);\n                        return;\n                    }\n\n                    \n                    try {\n                        let edgeName = _.find(this.graph.edges.list,{name:k.class}).remedy;\n                        graph.insertEdge(parent, k.id, edgeName, source, target, baseEdgeStyle+direction);\n                    } catch(err){\n                        graph.insertEdge(parent, k.id, k.class, source, target, baseEdgeStyle+direction);\n                    } \n                })\n                \n            }\n            \n        }\n        finally {\n            \n            model.endUpdate();    \n\n            // 合并图\n            editor.graph.getModel().mergeChildren(model.getRoot(), parent, true);\n\n    \n            this.executeLayout();\n\n            this.onGraphToCenter(true);\n\n        }\n    },\n    // 图分析 - 子图\n    loadSubGraph(node){\n\n        let term = \"\";\n        let edgeStr = _.isEmpty(node.edge) ? node.edge : `:${node.edge}`;\n\n        if(node.direction==\"out\"){\n            term = `match ('${node.node.id}') - [${edgeStr}*${node.step}] -> ()`;\n        } else{\n            term = `match ('${node.node.id}') <- [${edgeStr}*${node.step}] - ()`;\n        }\n\n        this.m3.callFS(\"/matrix/m3graph/graphService.js\", encodeURIComponent(term)).then( res=>{\n            \n            let rtn = res.message[0].graph;\n            console.log(1111,rtn)\n\n            let allNodes = _.concat([],rtn.nodes);\n            let allEdges = _.concat([],rtn.edges);\n\n            if( rtn['diff'] && 'add' in rtn['diff'] ){\n                allNodes = _.concat(allNodes, rtn.diff.add.nodes);\n                allEdges = _.concat(allEdges, rtn.diff.add.edges);\n            }\n\n            if( rtn['diff'] && 'del' in rtn['diff'] ){\n                allNodes = _.concat(allNodes, rtn.diff.del.nodes);\n                allEdges = _.concat(allEdges, rtn.diff.del.edges);\n            }\n\n            this.graph.data.nodes = _.uniqBy(allNodes,'id');\n            this.graph.data.edges = _.uniqBy(allEdges,'id');\n\n            this.renderAndMergeGraph(this.graph.editor);\n\n        } );\n        \n        \n    },\n    // 右键菜单\n    createPopupMenu(editor, graph, menu, cell, evt){\n        \n        // 节点或边菜单\n        if (cell != null){\n            \n            // cell object\n            let id = cell.getId();\n            let value = cell.getValue();\n            \n            // 节点菜单\n            if(!cell.edge){\n                \n                if(!this.m3.auth.isAdmin) return;\n\n                let node = {id: id, value: value, type:'event', cell: cell};\n\n                /* menu.addItem('实体分析', null, ()=>{\n                    \n                }); */\n\n                /* menu.addItem('实体删除', null, ()=>{\n                    this.removeEntityHandler(cell);\n                }); */\n\n                // menu.addSeparator();\n                \n                menu.addItem('节点删除', null, ()=>{\n                    this.onDeleteSelectedCells(graph,evt != null && mxEvent.isShiftDown(evt));\n                });\n\n                let vars = {};\n                let submenuBsearch = null;\n                let submenuEsearch = null;\n                this.m3.callFS(\"/matrix/m3graph/getEdgesByClass.js\",encodeURIComponent(id)).then(rtn=>{\n                    \n                    menu.addSeparator();\n\n                    let edgeListByClass = rtn.message;\n\n                    if(_.find(edgeListByClass,{direction:'out'})){\n                        submenuBsearch = menu.addItem('起点查询', null, null);\n                    }\n                    if(_.find(edgeListByClass,{direction:'in'})){\n                        submenuEsearch = menu.addItem('终点查询', null, null);\n                    }\n                    _.forEach(edgeListByClass,(v,index)=>{\n                        \n                        if(v.direction == 'out'){\n                            \n                            vars['submenuBStep'+index] = menu.addItem(v.remedy,null,null,submenuBsearch)\n                            let stepCount = Array(6);\n                            _.forEach(stepCount,(val,idx)=>{\n                                let step = idx + 1;\n                                \n                                menu.addItem(step + '跳', null, ()=>{\n                                    this.loadSubGraph({direction:\"out\",node:node,step:step,edge:v.name});\n                                },vars['submenuBStep'+index]);\n                            \n                            })\n                        } else {\n                            vars['submenuEStep'+index] = menu.addItem(v.remedy,null,null,submenuEsearch);\n                            let stepCount = Array(6);\n                            _.forEach(stepCount,(val,idx)=>{\n                                let step = idx + 1;\n                                \n                                menu.addItem(step + '跳', null, ()=>{\n                                    this.loadSubGraph({direction:\"in\",node:node,step:step,edge:v.name});\n                                },vars['submenuEStep'+index]);\n                                \n                            })\n                        }\n                        \n                    })\n\n                })\n                    \n                \n\n            } else {\n                \n                if(!this.m3.auth.isAdmin) return;\n\n                // node = {id: id, value: value, type:'edge', cell: cell};\n\n                /* menu.addItem('实体关系分析', null, ()=>{\n                    \n                });\n                menu.addItem('实体关系删除', null, ()=>{\n                    \n                });\n                menu.addSeparator();\n\n                menu.addItem('新建关系类型', null, ()=>{\n                    \n                });\n                menu.addItem('更新关系类型', null, ()=>{\n                    \n                });\n                \n                menu.addSeparator();\n\n                menu.addItem('隐藏边', null, ()=>{\n                    \n                }); */\n            }\n        } \n        // 画布菜单\n        else {\n\n            let cells = this.graph.editor.graph.getChildVertices(this.graph.editor.graph.getDefaultParent())\n            if(!_.isEmpty(cells)){\n                menu.addItem('清空', null, ()=>{\n                    this.onCanvasClear();\n                });\n            }\n            menu.addSeparator();\n\n            \n            let submenuLayout = menu.addItem('布局', null, null);\n\n            let submenuLayoutHierarchical = menu.addItem('分层布局', null, null,submenuLayout);\n            menu.addItem('上下', null, ()=>{\n                this.graph.layout.default = 'hierarchical_vertical';\n                this.executeLayout();\n            }, submenuLayoutHierarchical);\n            menu.addItem('左右', null, ()=>{\n                this.graph.layout.default = 'hierarchical_horizontal';\n                this.executeLayout();\n            }, submenuLayoutHierarchical);\n\n            \n            let submenuLayoutTree = menu.addItem('树形布局', null, null,submenuLayout);\n\n            menu.addItem('上下', null, ()=>{\n                this.graph.layout.default = 'tree_vertical';\n                this.executeLayout();\n            }, submenuLayoutTree);\n            menu.addItem('左右', null, ()=>{\n                this.graph.layout.default = 'tree_horizontal';\n                this.executeLayout();\n            }, submenuLayoutTree);\n\n            menu.addItem('随机布局', null, ()=>{\n                this.graph.layout.default = 'organic';\n                this.executeLayout();\n            }, submenuLayout);\n            menu.addItem('圆形布局', null, ()=>{\n                this.graph.layout.default = 'circle';\n                this.executeLayout();\n            }, submenuLayout);\n\n        }\n        \n    },\n    // 设置布局\n    executeLayout(){\n        let graph = this.graph.editor.graph;\n        let parent = graph.getDefaultParent();\n        let layout = this.graph.layout;\n        let model = graph.getModel();\n\n        // 布局定义\n        if(layout.default === 'hierarchical_vertical'){\n            // Layout hierarchical\n            model.beginUpdate();\n            try {\n                layout.inst = new mxHierarchicalLayout(graph, mxConstants.DIRECTION_NORTH);\n                layout.inst.edgeStyle = layout.edgeStyle;\n                layout.inst.intraCellSpacing = 80;\n                layout.inst.interRankCellSpacing = 80;\n                \n                layout.inst.execute(parent, null);\n\n            } finally {\n                let morph = new mxMorphing(graph);  \n                morph.addListener(mxEvent.DONE, function(){  \n                    model.endUpdate();  \n                });  \n                    \n                morph.startAnimation();  \n            }\n            \n        } else if(layout.default === 'hierarchical_horizontal'){\n            // Layout hierarchical\n            model.beginUpdate();\n            try {\n                layout.inst = new mxHierarchicalLayout(graph, mxConstants.DIRECTION_WEST);\n                layout.inst.edgeStyle = layout.edgeStyle;\n                layout.inst.intraCellSpacing = 80;\n                layout.inst.interRankCellSpacing = 80;\n                \n                layout.inst.execute(parent, null);\n            } finally {\n                let morph = new mxMorphing(graph);  \n                morph.addListener(mxEvent.DONE, function(){  \n                    model.endUpdate();  \n                });  \n                    \n                morph.startAnimation();  \n            }\n            \n        } else if(layout.default === 'organic'){\n            // Layout Organic\n            model.beginUpdate();\n            try {\n                layout.inst = new mxFastOrganicLayout(graph);\n                layout.inst.forceConstant = 140;\n                //layout.inst.execute(parent);\n\n                layout.inst.execute(parent,null);\n            } finally {\n                model.endUpdate();\n            }\n            \n        } else if(layout.default === 'tree_vertical'){\n            /* Layout tree vertical */\n            model.beginUpdate();\n            try {\n                let tmp = graph.getSelectionCell();\n                let roots = null;\n                let cells = [tmp];\n                \n                if ( tmp == null || model.getChildCount(tmp) == 0 ) {\n                    if (model.getEdgeCount(tmp) == 0){\n                        roots = graph.findTreeRoots(parent);\n                    }\n                } else {\n                    roots = graph.findTreeRoots(tmp);\n                }\n\n                if ( roots != null && roots.length > 0 ) {\n                    cells = roots;\n                }\n                \n                if( cells.length > 0 ) {\n                    _.forEach(cells,(v)=>{\n                        layout.inst = new mxCompactTreeLayout(graph, false);\n                        layout.inst.edgeRouting = false;\n                        layout.inst.levelDistance = 30;\n                        layout.inst.execute(parent, v);\n                    })\n                }\n\n            } finally {\n                let morph = new mxMorphing(graph);  \n                morph.addListener(mxEvent.DONE, function(){  \n                    model.endUpdate();  \n                });  \n                    \n                morph.startAnimation();  \n            }\n        } else if(layout.default === 'tree_horizontal'){\n            /* Layout tree horizontal */\n            model.beginUpdate();\n            try {\n                let tmp = graph.getSelectionCell();\n                let roots = null;\n                let cells = [tmp];\n                \n                if (tmp == null || model.getChildCount(tmp) == 0){\n                    if (model.getEdgeCount(tmp) == 0){\n                        roots = graph.findTreeRoots(parent);\n                    }\n                } else {\n                    roots = graph.findTreeRoots(tmp);\n                }\n\n                if (roots != null && roots.length > 0){\n                    cells = roots;\n                }\n                \n                if( cells.length > 0 ) {\n                    _.forEach(cells,(v)=>{\n                        layout.inst = new mxCompactTreeLayout(graph, true);\n                        layout.inst.edgeRouting = false;\n                        layout.inst.levelDistance = 30;\n                        layout.inst.execute(parent, v);\n                    })\n                }\n                \n            } finally {\n                let morph = new mxMorphing(graph);  \n                morph.addListener(mxEvent.DONE, function(){  \n                    model.endUpdate();  \n                });  \n                    \n                morph.startAnimation();  \n            }\n        } else {\n            /* Layout Circle */\n            model.beginUpdate();\n            try {\n                layout.inst = new mxCircleLayout(graph);\n                layout.inst.execute(parent, null);\n            } finally {\n                model.endUpdate();\n            }\n        }\n        \n    },\n    // 节点告警状态\n    onRefreshCellStatus(){\n        \n        let graph = this.graph.editor.graph;\n        let parent = graph.getDefaultParent();\n        \n        // 图所有节点\n        let cells = _.map(graph.getChildVertices(parent),v=>{\n                        return {gid: v.id, name: v.value};\n                    });\n\n        this.m3.callFS(\"/matrix/m3graph/graph_imap_data.js\", encodeURIComponent(JSON.stringify(cells))).then( rtn=>{\n            \n            graph.getModel().beginUpdate();\n\n            try {\n                \n                _.forEach(rtn.message,(v)=>{\n                    let id = v.gid;\n                    let status = v.status;\n                    let cell = graph.getModel().getCell(id);\n                    //let state = graph.view.getState(cell);\n                    \n                    if (cell != null) {\n                        \n                        // Resets\n                        graph.removeCellOverlays(cell);\n\n                        if (status >= 5) {\n                            graph.addCellOverlay(cell, this.createOverlayByTip(status, `${id}: 重大告警`));\n                        } else if (status >3 && status < 5) {\n                            graph.addCellOverlay(cell, this.createOverlayByTip(status, `${id}: 严重告警`));\n                        } else {\n                            graph.removeCellOverlays(cell);\n                        } \n                    \n                    }\n\n                })\n\n            } \n            finally {\n                graph.getModel().endUpdate();\n            }\n        } );\n    },\n    // 节点状态渲染图标\n    createOverlayByTip(image, tooltip) {                  \n        let overlay = new mxCellOverlay(new mxImage(`/static/assets/images/apps/png/severity/${image}.png`,24,24), tooltip, mxConstants.ALIGN_RIGHT, mxConstants.ALIGN_TOP, new mxPoint(-10,15));\n        return overlay;\n    },\n    // 删除选择的节点\n    onDeleteSelectedCells(graph,includeEdges){\n        // Cancels interactive operations\n        graph.escape();\n        var cells = graph.getDeletableCells(graph.getSelectionCells());\n        \n        if (cells != null && cells.length > 0){\n            var parents = graph.model.getParents(cells);\n            graph.removeCells(cells, includeEdges);\n            \n            // Selects parents for easier editing of groups\n            if (parents != null){\n                var select = [];\n                \n                for (var i = 0; i < parents.length; i++){\n                    if (graph.model.contains(parents[i]) &&\n                        (graph.model.isVertex(parents[i]) ||\n                        graph.model.isEdge(parents[i]))){\n                        select.push(parents[i]);\n                    }\n                }\n                graph.setSelectionCells(select);\n            }\n        }\n    },\n    // 节点高亮定位显示\n    onCellPosition(row,hFlag,vFlag){\n        \n        let id = row.entity;\n        let editor = this.graph.editor; \n        let graph = editor.graph;\n        let cell = graph.getModel().getCell(id);\n\n        try{\n            // 根据cell数量决定视图是否缩放\n            if(this.graph.data.nodes.length > 10){\n                editor.execute(\"fit\");    \n            } else {\n                editor.execute(\"actualSize\");  \n            }\n            \n            let containerW = graph.container.clientWidth;\n            let containerH = graph.container.clientHeight;\n            let x =-cell.geometry.x + ( containerW - cell.geometry.width) / 2;\n            let y =-cell.geometry.y + ( containerH - cell.geometry.height) / 2;\n            \n            if( hFlag ){\n                x = x / 2;\n            }\n\n            if( vFlag ){\n                y = y / 2;\n            }\n            \n            graph.getView().setTranslate(x,y);\n            graph.scrollCellToVisible(cell);\n            graph.setSelectionCells([cell]);\n\n            _.delay(()=>{\n                let state = graph.view.getState(cell);\n                \n                if(this.graph.control.ifIcon){\n                    state.shape.node.getElementsByTagName(\"image\")[0].setAttribute('class', 'animated flash');\n                } else {\n                    state.shape.node.getElementsByTagName(\"ellipse\")[0].setAttribute('class', 'animated flash');\n                }\n            },500)\n\n            // 选择节点突出显示\n            graph.setCellStyles(mxConstants.STYLE_PERIMETER_SPACING, 8, [cell]);\n            \n        } catch(err){\n            \n            // 当前画布中不包含该实体\n            this.$message({\n                type: \"info\",\n                message: \"没有该实体 \"\n            })\n        }\n    },\n    // 画布清空\n    onCanvasClear(){\n        this.graph.editor.execute(\"selectAll\");\n        this.graph.editor.execute(\"delete\");\n    }\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n    .el-container{\n        height: calc(100vh - 50px)!important;\n    }\n</style>\n\n<style>\n    .outlineContainer{\n        position:absolute;\n        overflow:hidden;\n        top:20px;\n        right:90px;\n        width:200px;\n        height:140px;\n        background:transparent;\n        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n    }\n    /* mxgraph contextmenu style */\n    td.mxPopupMenuIcon div {\n        width:16px;\n        height:16px;\n    }\n    html div.mxPopupMenu {\n        -webkit-box-shadow:2px 2px 3px #d5d5d5;\n        -moz-box-shadow:2px 2px 3px #d5d5d5;\n        box-shadow:2px 2px 3px #d5d5d5;\n        _filter:progid:DXImageTransform.Microsoft.DropShadow(OffX=2, OffY=2, Color='#d0d0d0', Positive='true');\n        background:white;\n        position:absolute;\n        border:1px solid #e7e7e7;\n        padding:3px;\n    }\n    html table.mxPopupMenu {\n        border-collapse:collapse;\n        margin:0px;\n    }\n    html td.mxPopupMenuItem {\n        padding:7px 30px 7px 30px;\n        font-family: \"微软雅黑\";/* Microsoft YaHei,Helvetica Neue,Helvetica,Arial Unicode MS,Arial;*/\n        font-size:12px;\n    }\n    html td.mxPopupMenuIcon {\n        background-color:white;\n        padding:0px;\n    }\n    td.mxPopupMenuIcon .geIcon {\n        padding:2px;\n        padding-bottom:4px;\n        margin:2px;\n        border:1px solid transparent;\n        opacity:0.5;\n        _width:26px;\n        _height:26px;\n    }\n    td.mxPopupMenuIcon .geIcon:hover {\n        border:1px solid gray;\n        border-radius:2px;\n        opacity:1;\n    }\n    html tr.mxPopupMenuItemHover {\n        background-color: #f5f5f5;\n        color: black;\n    }\n    table.mxPopupMenu hr {\n        color:#cccccc;\n        background-color:#f5f5f5;\n        border:none;\n        height:1px;\n    }\n    table.mxPopupMenu tr {\n        font-size:4pt;\n    }\n</style>\n"],"sourceRoot":"src/components/graph"}]}