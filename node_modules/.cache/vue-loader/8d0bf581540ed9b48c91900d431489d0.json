{"remainingRequest":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/src/components/graph/GraphHandler.vue?vue&type=style&index=1&lang=css&","dependencies":[{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/src/components/graph/GraphHandler.vue","mtime":1629791743822},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cnwangzd/Documents/cnwangzd/wecise/m3/apps/m3search/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5vdXRsaW5lQ29udGFpbmVyewogICAgcG9zaXRpb246YWJzb2x1dGU7CiAgICBvdmVyZmxvdzpoaWRkZW47CiAgICB0b3A6MjBweDsKICAgIHJpZ2h0OjkwcHg7CiAgICB3aWR0aDoyMDBweDsKICAgIGhlaWdodDoxNDBweDsKICAgIGJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7CiAgICBib3gtc2hhZG93OiAwIDJweCAxMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjEpOwp9Ci8qIG14Z3JhcGggY29udGV4dG1lbnUgc3R5bGUgKi8KdGQubXhQb3B1cE1lbnVJY29uIGRpdiB7CiAgICB3aWR0aDoxNnB4OwogICAgaGVpZ2h0OjE2cHg7Cn0KaHRtbCBkaXYubXhQb3B1cE1lbnUgewogICAgLXdlYmtpdC1ib3gtc2hhZG93OjJweCAycHggM3B4ICNkNWQ1ZDU7CiAgICAtbW96LWJveC1zaGFkb3c6MnB4IDJweCAzcHggI2Q1ZDVkNTsKICAgIGJveC1zaGFkb3c6MnB4IDJweCAzcHggI2Q1ZDVkNTsKICAgIF9maWx0ZXI6cHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkRyb3BTaGFkb3coT2ZmWD0yLCBPZmZZPTIsIENvbG9yPScjZDBkMGQwJywgUG9zaXRpdmU9J3RydWUnKTsKICAgIGJhY2tncm91bmQ6d2hpdGU7CiAgICBwb3NpdGlvbjphYnNvbHV0ZTsKICAgIGJvcmRlcjoxcHggc29saWQgI2U3ZTdlNzsKICAgIHBhZGRpbmc6M3B4Owp9Cmh0bWwgdGFibGUubXhQb3B1cE1lbnUgewogICAgYm9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlOwogICAgbWFyZ2luOjBweDsKfQpodG1sIHRkLm14UG9wdXBNZW51SXRlbSB7CiAgICBwYWRkaW5nOjdweCAzMHB4IDdweCAzMHB4OwogICAgZm9udC1mYW1pbHk6ICLlvq7ova/pm4Xpu5EiOy8qIE1pY3Jvc29mdCBZYUhlaSxIZWx2ZXRpY2EgTmV1ZSxIZWx2ZXRpY2EsQXJpYWwgVW5pY29kZSBNUyxBcmlhbDsqLwogICAgZm9udC1zaXplOjEycHg7Cn0KaHRtbCB0ZC5teFBvcHVwTWVudUljb24gewogICAgYmFja2dyb3VuZC1jb2xvcjp3aGl0ZTsKICAgIHBhZGRpbmc6MHB4Owp9CnRkLm14UG9wdXBNZW51SWNvbiAuZ2VJY29uIHsKICAgIHBhZGRpbmc6MnB4OwogICAgcGFkZGluZy1ib3R0b206NHB4OwogICAgbWFyZ2luOjJweDsKICAgIGJvcmRlcjoxcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgICBvcGFjaXR5OjAuNTsKICAgIF93aWR0aDoyNnB4OwogICAgX2hlaWdodDoyNnB4Owp9CnRkLm14UG9wdXBNZW51SWNvbiAuZ2VJY29uOmhvdmVyIHsKICAgIGJvcmRlcjoxcHggc29saWQgZ3JheTsKICAgIGJvcmRlci1yYWRpdXM6MnB4OwogICAgb3BhY2l0eToxOwp9Cmh0bWwgdHIubXhQb3B1cE1lbnVJdGVtSG92ZXIgewogICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTsKICAgIGNvbG9yOiBibGFjazsKfQp0YWJsZS5teFBvcHVwTWVudSBociB7CiAgICBjb2xvcjojY2NjY2NjOwogICAgYmFja2dyb3VuZC1jb2xvcjojZjVmNWY1OwogICAgYm9yZGVyOm5vbmU7CiAgICBoZWlnaHQ6MXB4Owp9CnRhYmxlLm14UG9wdXBNZW51IHRyIHsKICAgIGZvbnQtc2l6ZTo0cHQ7Cn0K"},{"version":3,"sources":["GraphHandler.vue"],"names":[],"mappingsfile":"GraphHandler.vue","sourceRoot":"src/components/graph","sourcesContent":["<template>\n\n  <el-container ref=\"container\">\n    <el-header style=\"height:40px;line-height:40px;padding:0px;text-align:right;\">\n        <el-popover\n            placement=\"left\"\n            trigger=\"click\"\n            popper-class=\"info-popper\">\n            <el-container>\n                <el-main style=\"padding:0px;\">\n                    <el-tabs value=\"setup\">\n                        <el-tab-pane label=\"设置\" name=\"setup\">\n                            <el-form>\n                                <el-form-item label=\"工具栏\">\n                                    <el-switch\n                                        v-model=\"graph.control.toolbar.show\"\n                                        active-color=\"#13ce66\"\n                                        inactive-color=\"#dddddd\">\n                                    </el-switch>\n                                </el-form-item>\n                                <el-form-item label=\"自动刷新\">\n                                    <el-switch\n                                        v-model=\"graph.control.refresh.enable\"\n                                        active-color=\"#13ce66\"\n                                        inactive-color=\"#dddddd\"\n                                        @change=\"onRefreshChange\">\n                                    </el-switch>\n                                </el-form-item>\n                                <el-form-item label=\"手动刷新\">\n                                    <el-button type=\"text\"><i class=\"el-icon-refresh\" @click=\"onRefreshCellStatus\"></i></el-button>\n                                </el-form-item>\n                                <el-form-item label=\"预览视图\">\n                                    <el-switch\n                                        v-model=\"graph.control.outline.show\"\n                                        active-color=\"#13ce66\"\n                                        inactive-color=\"#dddddd\"\n                                        @change=\"onToggleOutline\">\n                                    </el-switch>\n                                </el-form-item>\n                            </el-form>\n                        </el-tab-pane>\n                        <el-tab-pane label=\"节点\" name=\"vertex\">\n                            <el-form>\n                                <el-form-item label=\"排列\">\n                                    \n                                </el-form-item>\n                            </el-form>\n                        </el-tab-pane>\n                        <el-tab-pane label=\"边线\" name=\"edge\">\n                            <el-form>\n                                <el-form-item label=\"样式\">\n                                    \n                                </el-form-item>\n                            </el-form>\n                        </el-tab-pane>\n                    </el-tabs>\n                </el-main>\n            </el-container>\n            <el-button type=\"text\" slot=\"reference\">\n                <i class=\"el-icon-setting\" style=\"font-size:15px;margin:0 5px;\"></i>\n            </el-button>\n        </el-popover>\n    </el-header>\n    <el-main id=\"graphContainer\" ref=\"graphContainer\" style=\"width:100vw;height:100vh;min-width:100vw;position:releative;overflow:hidden;padding:0px;\"></el-main>\n    <div ref=\"outlineContainer\"\n        class=\"outlineContainer\"\n        v-show=\"graph.control.outline.show\"\n        draggable=\"true\">\n    </div>\n  </el-container>\n\n</template>\n\n<script>\nimport 'mxgraph/javascript/src/css/common.css';\n\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport mxgraph from './mxGraph.js';\nconst {mxEditor,mxGraph,mxConstants,mxPanningHandler,mxGraphHandler,mxGuide,mxEdgeHandler,mxClient,mxRectangleShape,mxRubberband,mxCellOverlay,mxOutline,mxImage,mxPoint,mxEdgeStyle,mxCellTracker,mxUtils,mxCodec,mxEvent,mxHierarchicalLayout,mxMorphing,mxFastOrganicLayout,mxCompactTreeLayout,mxCircleLayout} = mxgraph;\n\nexport default {\n  name: \"GraphView\",\n  props: {\n    graphData: Object,\n    global: Object\n  },\n  data() {\n    return {\n      graph: {\n            editor:null,\n            data: {\n                nodes: [],\n                edges: []\n            },\n            control:{\n                ifIcon: true,\n                outline: {\n                    show: true,\n                    inst: null\n                },\n                toolbar:{\n                    show: false\n                },\n                refresh:{\n                    inst: null,\n                    enable: false,\n                    interval: 15*1000\n                }\n            },\n            layout: {\n                default: 'hierarchical_vertical'\n            },\n            style: {\n                grid: {\n                    show: false\n                },\n                vertex:{\n                    align: {\n                        value: '',\n                        list: [\n                            {name: '左对齐', icon:'', value:'mxConstants.ALIGN_LEFT'},\n                            {name: '居中', icon:'', value:'mxConstants.ALIGN_CENTER'},\n                            {name: '右对齐', icon:'', value:'mxConstants.ALIGN_RIGHT'},\n                            {name: '上对齐', icon:'', value:'mxConstants.ALIGN_TOP'},\n                            {name: '中间', icon:'', value:'mxConstants.ALIGN_MIDDLE'},\n                            {name: '下对齐', icon:'', value:'mxConstants.ALIGN_BOTTOM'}\n                        ]\n                    }\n                },\n                edge: {\n                    endArrow: 'classic',\n                    strokeWidth: 1,\n                    strokeColor: '#333333',\n                    value: {\n                            name: 'isometric1', cnTitle:'等距1', title:'isometricEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['isometricEdgeStyle', null, null, null]\n                        },\n                    list: [\n                        {\n                            name: 'straight', cnTitle:'直线', title:'isometricEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:[null, null, null]\n                        },\n                        {\n                            name: 'orthogonal', cnTitle:'正交', title:'orthogonalEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['orthogonalEdgeStyle', null, null]\n                        },\n                        {\n                            name: 'simple1', cnTitle:'简单1', title:'elbowEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['elbowEdgeStyle', null, null, null]\n                        },\n                        {\n                            name: 'simple2', cnTitle:'简单2', title:'elbowEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['elbowEdgeStyle', 'vertical', null, null]\n                        },\n                        {\n                            name: 'isometric1', cnTitle:'等距1', title:'isometricEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['isometricEdgeStyle', null, null, null]\n                        },\n                        {\n                            name: 'isometric2', cnTitle:'等距2', title:'isometricEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_ELBOW, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['isometricEdgeStyle', 'vertical', null, null]\n                        },\n                        {\n                            name: 'entityRelation', cnTitle:'实体关联', title:'entityRelationEdgeStyle', keys:[mxConstants.STYLE_EDGE, mxConstants.STYLE_CURVED, mxConstants.STYLE_NOEDGESTYLE], values:['entityRelationEdgeStyle', null, null]\n                        }\n                    ]\n                }\n            },\n            path: {\n                list:[],\n                colors:['#ff0000','#ffd700','#666666','#00ffff','#40e0d0','#ff7373','#d3ffce','#3399ff','#000080','#66cccc','#a0db8e','#794044','#6897bb','#cc0000'],\n            },\n            edges: {\n                value: \"\",\n                list: [],\n                properties: {\n                    value: \"\",\n                    list: []\n                }\n            }\n      }\n    };\n  },\n  watch: {\n        graphData:{\n          handler(){\n              this.setGraphData();\n          },\n          immediate: true\n        },\n        'graph.control.refresh.enable':{\n            handler(val){\n                if(val) {\n                    this.graph.control.refresh.inst = setInterval(()=>{\n                        this.onRefreshCellStatus();\n                    },this.graph.control.refresh.interval);\n                    this.$message({\n                        type: \"info\",\n                        message: \"自动刷新开启\"\n                    })\n                } else {\n                    clearInterval(this.graph.control.refresh.inst);\n                    this.$message({\n                        type: \"info\",\n                        message: \"自动刷新关闭\"\n                    })\n                }\n            },\n            immediate:true\n        },\n  },\n  created(){\n    this.init();\n  },\n  mounted(){\n\n      this.initGraph();\n\n      this.eventHub.$on(\"graph-position\",(v)=>{\n          this.onCellPosition(v.row,v.hFlag,v.vFlag);\n      })\n\n  },\n  methods: {\n    // 初始化\n    init(){\n        this.m3.callFS(\"/matrix/m3graph/edges.js\",null).then( (rtn)=>{\n            this.graph.edges.list = rtn.message;\n        } );\n\n        // 状态刷新标志\n        this.graph.control.refresh.enable = (localStorage.getItem(\"GRAPH-STATUS-IFREFRESH\") == 'true');\n\n        // 节点是否可以移动 \n        mxGraphHandler.prototype.setMoveEnabled(true);\n        //显示节点位置标尺  \n        mxGraphHandler.prototype.guidesEnabled = true;\n\n        // Alt disables guides\n        mxGuide.prototype.isEnabledForEvent = function(evt){\n            return !mxEvent.isAltDown(evt);\n        };\n\n        // Enables snapping waypoints to terminals\n        mxEdgeHandler.prototype.snapToTerminals = true;\n\n    },\n    // 加载图数据\n    setGraphData(){\n        \n        if(_.isEmpty(this.graphData)) {\n            return false;\n        } else {\n            this.graph.data = this.graphData;\n            this.onReload();\n        }\n    },\n    // 初始化图板\n    initGraph(){\n        \n        this.graph.editor = new mxEditor();\n        this.graph.editor.setGraphContainer(this.$refs.graphContainer.$el);\n        let graph = this.graph.editor.graph;\n\n        // 是否允许平移。true：表示按住Shift+左键拖动时，整个graph移动；\n        // false：按住Shift+左键拖动时，选中的图形水平方向或者垂直方向平移。\n        graph.setPanning(true);\n        mxPanningHandler.prototype.isPanningTrigger = function() {\n            return true;\n        };\n\n        // 禁止改变节点大小\n        graph.setCellsResizable(false);\n        // 禁止节点文字编辑功能\n        graph.setCellsEditable(false);\n        \n        // 禁止连线移动\n        graph.disconnectOnMove = false;\n        \n\n        // 允许连线的目标和源是同一元素 \n        graph.setAllowLoops(true); \n        // 居中缩放\n        graph.centerZoom = true;\n        // Tooltips on touch devices\n        graph.setTooltips(!mxClient.IS_TOUCH);\n        // 支持Html\n        graph.setHtmlLabels(true);\n\n        // 去锯齿效果\n        mxRectangleShape.prototype.crisp = true;\n\n        // 鼠标框选\n        new mxRubberband(graph);\n        \n        // 预览时鼠标悬浮到节点时，改变鼠标样式\n        graph.getCursorForCell = function(cell){\n            if (cell != null && cell.value != null && cell.vertex ==1 ){\n                return 'pointer';\n            }\n        }\n        \n        // 预览时鼠标悬浮到节点时，改变节点样式\n        new mxCellTracker(graph);\n\n        // Sets global styles\n        var style = graph.getStylesheet().getDefaultEdgeStyle();\n        style[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n        style[mxConstants.STYLE_ROUNDED] = true;\n        style[mxConstants.EDGE_SELECTION_STROKEWIDTH] = 3;\n        style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR] = 'transparent';\n        style[mxConstants.STYLE_LABEL_PADDING] = 5;\n\n\n        style = graph.getStylesheet().getDefaultVertexStyle();\n        style[mxConstants.STYLE_FILLCOLOR] = '#2f8ee7';\n        style[mxConstants.STYLE_FONTCOLOR] = '#333333';\n        style[mxConstants.STYLE_FONTSIZE] = '14';\n        style[mxConstants.STYLE_SHAPE] = 'swimlane';\n        style[mxConstants.STYLE_SPACING] = '10';\n        style[mxConstants.STYLE_STARTSIZE] = 30;\n        style[mxConstants.STYLE_GRADIENTCOLOR] = '#419efe';\n        style[mxConstants.VERTEX_SELECTION_STROKEWIDTH] = 3;\n        style[mxConstants.VERTEX_SELECTION_COLOR] = '#ff0000';\n\n        // 预览时鼠标悬浮到节点时，改变节点样式\n        new mxCellTracker(graph);\n\n        // 首先禁用浏览器右键菜单\n        mxEvent.disableContextMenu(this.$el);\n        // 右键菜单\n        graph.popupMenuHandler.factoryMethod = (menu, cell, evt)=>{\n            this.createPopupMenu(this.graph.editor, graph, menu, cell, evt);\n        };\n\n        this.initGraphEvent(graph);\n\n    },\n    initGraphEvent(graph){\n        // 初始化滚轮图缩放事件监听\n        this.addScrollListener(graph);\n\n        // Add the source vertex\n        graph.addListener(mxEvent.ADD_CELLS, _.debounce(()=> {\n            this.onRefreshCellStatus();\n        }),1000);\n\n        // 初始化鹰眼视图\n        this.onInitOutline(graph);\n\n        // 监听拖拽事件\n        let container = this.$refs.graphContainer.$el;\n        mxEvent.addListener(container, 'dragover', (evt)=>{\n            if (graph.isEnabled()){\n                evt.stopPropagation();\n                evt.preventDefault();\n            }\n        });\n        // 监听拖入事件\n        mxEvent.addListener(container, 'drop', (evt)=>{\n            \n            if (graph.isEnabled()){\n                evt.stopPropagation();\n                evt.preventDefault();\n\n                // Gets drop location point for vertex\n                var pt = mxUtils.convertPoint(graph.container, mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n                var tr = graph.view.translate;\n                var scale = graph.view.scale;\n                var x = pt.x / scale - tr.x;\n                var y = pt.y / scale - tr.y;\n                \n                // Converts local entity to graph cell\n                let addCellToGraph = (items)=>{\n                    \n                    graph.getModel().beginUpdate();\n\n                    try{\n\n                        graph.getModel();\n                        let parent = graph.getDefaultParent();\n\n                        _.forEach(items,(v)=>{\n                            \n                            let cell = graph.getModel().getCell(v.id);\n\n                            if(cell){\n                                this.$message({\n                                    type: \"info\",\n                                    message: \"已有该实体\"\n                                })\n                                return;\n                            }\n\n                            let type = v.icon || 'matrix';\n\n                            // 可设置默认显示属性\n                            let name =  '';\n                            \n                            try{\n                                if(window.URL_PARAMS_GRAPH){\n                                    name = v[window.URL_PARAMS_GRAPH.title];\n                                } else {\n                                    name = v[this.model.graph.default.title];\n                                }\n                            } catch(err){\n                                name = v[\"id\"];\n                            }\n\n                            let imageUrl = this.imageRenderHandler(type);\n\n                            if(this.graph.control.ifIcon){\n                                if(this.checkImgExists(`${type}.png`)){\n                                    cell = graph.insertVertex(parent, v.id, name, x, y, 60, 60,`shape=image;html=1;image=${imageUrl};verticalLabelPosition=bottom;verticalAlign=top;`);\n                                } else {\n                                    cell = graph.insertVertex(parent, v.id, name, x, y, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                                }    \n                            } \n                            // shape渲染\n                            else {\n                                cell = graph.insertVertex(parent, v.id, name, x, y, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                            }\n\n                            // 定位到cell\n                            setTimeout(()=>{\n                                graph.scrollCellToVisible(cell);\n                                graph.setSelectionCell(cell);\n                            },1000)\n\n                        })\n                    \n                        \n                    } catch(err){\n                        console.error(err);\n                    } finally {\n                        graph.getModel().endUpdate();\n\n                        this.$emit(\"control-show\",false);\n                    }\n                };\n    \n                var items = [JSON.parse(evt.dataTransfer.getData(\"Text\"))];\n\n                addCellToGraph(items);\n            }\n        });\n\n    },\n    // 滚轮缩放事件监听\n    addScrollListener(graph){\n        var t = (function a(element, wheelHandle) {\n                if (typeof element != 'object') return;\n                if (typeof wheelHandle != 'function') return;\n\n                // 监测浏览器\n                if (typeof a.browser == 'undefined') {\n                    var user = navigator.userAgent;\n                    var b = {};\n                    b.opera = user.indexOf(\"Opera\") > -1 && typeof window.opera == \"object\";\n                    b.khtml = (user.indexOf(\"KHTML\") > -1 || user.indexOf(\"AppleWebKit\") > -1 || user.indexOf(\"Konqueror\") > -1) && !b.opera;\n                    b.ie = user.indexOf(\"MSIE\") > -1 && !b.opera;\n                    b.gecko = user.indexOf(\"Gecko\") > -1 && !b.khtml;\n                    a.browser = b;\n                }\n                if (element == window)\n                    element = document;\n                if (a.browser.ie)\n                    element.attachEvent('onmousewheel', wheelHandle);\n                else\n                    element.addEventListener(a.browser.gecko ? 'DOMMouseScroll' : 'mousewheel', wheelHandle, false);\n        });\n        t(graph.container, this.wheelHandle);\n    },\n    // 滚轮缩放图\n    wheelHandle(e) {\n        var upcheck;\n\n        if (e.wheelDelta) {\n            upcheck = e.wheelDelta > 0 ? 1 : 0;\n        } else {\n            upcheck = e.detail < 0 ? 1 : 0;\n        }\n        if (upcheck) {\n            this.graph.editor.graph.zoomIn();\n        }\n        else {\n            this.graph.editor.graph.zoomOut();\n        }\n\n        if (window.event) {\n            e.returnValue = false;\n            window.event.cancelBubble = true;\n        } else {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    },\n    checkImgExists(){\n        //let term = {parent:\"/assets/images/entity/png\", name:name};\n        return true;//fsHandler.callFsJScript(\"/matrix/m3graph/checkHaveFile.js\", encodeURIComponent(JSON.stringify(term))).message;\n    },  \n    // 渲染图片来源\n    imageRenderHandler(icon) {\n        \n        if(_.includes(icon,'http://')){\n            return icon;\n        } else {\n            return `/static/assets/images/entity/png/${icon}.png`;\n        }\n\n    },\n    // 切换预览\n    onInitOutline(graph){\n        new mxOutline(graph, this.$refs.outlineContainer);\n    },\n    onToggleOutline(val){\n        this.graph.control.outline.show = val;\n    },\n    // 自动刷新控制\n    onRefreshChange(val){\n        this.onRefreshCellStatus();\n        this.graph.control.refresh.enable = val;\n        localStorage.setItem(\"GRAPH-STATUS-IFREFRESH\", this.graph.control.refresh.enable);\n    },\n    // 定位图节点\n    onPosition(id,hFlag,vFlag){\n                \n        let editor = this.graph.editor; \n        let graph = editor.graph;\n        let cell = graph.getModel().getCell(id);\n\n        try{\n            // 恢复图实际大小\n            editor.execute(\"actualSize\");    \n            \n            let containerW = graph.container.clientWidth;\n            let containerH = graph.container.clientHeight;\n            let x =-cell.geometry.x + ( containerW - cell.geometry.width) / 2;\n            let y =-cell.geometry.y + ( containerH - cell.geometry.height) / 2;\n            \n            if( hFlag ){\n                x = x / 2;\n            }\n\n            if( vFlag ){\n                y = y / 2;\n            }\n            \n            graph.getView().setTranslate(x,y);\n            graph.scrollCellToVisible(cell);\n            graph.setSelectionCells([cell]);\n\n            _.delay(()=>{\n                let state = graph.view.getState(cell);\n                \n                if(this.model.control.ifIcon){\n                    state.shape.node.getElementsByTagName(\"image\")[0].setAttribute('class', 'animated flash');\n                } else {\n                    state.shape.node.getElementsByTagName(\"ellipse\")[0].setAttribute('class', 'animated flash');\n                }\n            },500)\n\n            // 选择节点突出显示\n            graph.setCellStyles(mxConstants.STYLE_PERIMETER_SPACING, 8, [cell]);\n            \n        } catch(err){\n            \n            // 当前画布中不包含该实体\n            this.$message({\n                type: \"info\",\n                message: \"画布没有该实体 \"\n            })\n        }\n        \n    },\n    // 图自适应并居中显示\n    onGraphToCenter(immediate){\n        const self = this;\n\n        let editor = this.graph.editor;\n        let graph = editor.graph;\n        let parent = graph.getDefaultParent();\n        let limit = 30;  // 当前画布节点数量阈值\n        let topCell = graph.findTreeRoots(parent)[0];\n        \n        // 获取当前选择节点 \n        // 针对加载子图的场景\n        // 最顶层节点  graph.center(true,true,0,0.5);\n        // 子节点  graph.center(true,true,0.5,0.5);\n        let toCenter = function(){\n            let selectionCell = graph.getSelectionCell();\n            let allCells = graph.getChildVertices(parent);\n            \n            if( allCells.length > limit){\n                // 图自适应\n                editor.execute(\"fit\");\n                editor.execute(\"actualSize\"); \n            } else {\n                // 图实际大小\n                editor.execute(\"actualSize\"); \n            }\n\n            // 没有选择节点\n            if( selectionCell == null ){\n                \n                graph.center(true,true,0.5,0.5);  // middle-center\n\n            } else {\n                \n                // 选择了最顶层节点\n                if( selectionCell == topCell ){\n                    graph.center(true,true,0,0.5); // top-center\n                    // 定位选择节点\n                    self.onPosition(selectionCell.getId(), true, true);\n                } \n                // 选择了子节点\n                else {\n                    graph.center(true,true,0.5,0.5);  // middle-center\n                    // 定位选择节点\n                    self.onPosition(selectionCell.getId(), true, true);\n                }\n            }\n\n            //graph.clearSelection();\n            \n        }\n\n        if(immediate){\n            editor.execute(\"fit\");\n            toCenter();\n        } else {\n            let loadSvg = function(){\n                try{\n                    let rtn = graph.getChildEdges(parent);\n                    \n                    if(_.size(rtn) > 0){\n                        return true;\n                    } else {\n                        return false;\n                    }\n                    \n                } catch(err){\n                    return false\n                }\n            };\n            \n            if(loadSvg()) {\n                setTimeout(()=>{\n                    editor.execute(\"fit\");\n                    toCenter();\n                },500)\n            } else {\n                setTimeout(loadSvg, 50);\n            }   \n        }\n    },\n    onReload(){\n        try{\n            $(this.$refs.graphContainer.$el).empty();\n            \n            // 清空\n            this.graph.editor.execute(\"selectAll\");\n            this.graph.editor.execute(\"delete\");\n\n            // 重新初始化\n            this.initGraph();\n\n        } catch(err){\n\n            this.initGraph();\n\n        } finally{\n            \n            this.renderGraph(this.graph.editor);\n\n        }\n    },\n    // 图绘制\n    renderGraph(editor){\n        \n        let graph = editor.graph;\n        let model = graph.getModel();\n        let parent = graph.getDefaultParent();\n\n        model.beginUpdate();\n        \n        try{\n            \n\n            if(!_.isEmpty(window.URL_PARAMS_ITEM)) {\n                let doc = mxUtils.parseXml(this.graph.data);\n                let codec = new mxCodec(doc);\n                codec.decode(doc.documentElement, model);\n            } else {\n                \n                \n                let allNodes = _.concat([],this.graph.data.nodes);\n                let allEdges = _.concat([],this.graph.data.edges);\n\n                if( this.graph.data['diff'] && 'add' in this.graph.data['diff'] ){\n                    allNodes = _.concat(allNodes, this.graph.data.diff.add.nodes);\n                    allEdges = _.concat(allEdges, this.graph.data.diff.add.edges);\n                }\n\n                if( this.graph.data['diff'] && 'del' in this.graph.data['diff'] ){\n                    allNodes = _.concat(allNodes, this.graph.data.diff.del.nodes);\n                    allEdges = _.concat(allEdges, this.graph.data.diff.del.edges);\n                }\n\n                allNodes = _.uniqBy(allNodes,'id');\n                allEdges = _.uniqBy(allEdges,'id'); \n                \n                // 绘制节点\n                _.forEach(allNodes,(v)=>{\n\n                    let _type = v._icon || 'matrix';\n\n                    // 可设置默认显示属性\n                    let _name =  '';\n\n                    try{\n                        if(window.URL_PARAMS_GRAPH){\n                            _name = v[window.URL_PARAMS_GRAPH.title];\n                        } else {\n                            _name = v[this.model.graph.default.title];\n                        }\n                    } catch(err){\n                        _name = v[\"id\"];\n                    }\n\n                    // 选择节点渲染模式：icon/shape\n                    let imageUrl = this.imageRenderHandler(_type);\n\n                    // icon渲染\n                    if(this.graph.control.ifIcon){\n                        if(this.checkImgExists(`${_type}.png`)){\n                            graph.insertVertex(parent, v.id, _name, 50, 50, 60, 60,`shape=image;html=1;image=${imageUrl};verticalLabelPosition=bottom;verticalAlign=top;`);\n                        } else {\n                            graph.insertVertex(parent, v.id, _name, 50, 50, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                        }    \n                    } \n                    // shape渲染\n                    else {\n                        graph.insertVertex(parent, v.id, _name, 50, 50, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                    }\n                })\n                \n                // 绘制边\n                _.forEach(allEdges,(k,index)=>{\n                    \n                    let source = model.getCell(k.source);\n                    let target = model.getCell(k.target);\n                    \n                    let baseEdgeStyle = `edgeStyle=${this.graph.style.edge.value.title};html=1;rounded=1;jettySize=auto;orthogonalLoop=1;endArrow=block;endFill=1;`;\n                    let direction = '';\n\n                    if(k.twoway){\n                        direction = 'startArrow=block;endArrow=block;endFill=1;';\n                    }\n\n                    // edge为path的样式\n                    if(k.class === \"path\"){\n                        baseEdgeStyle = `edgeStyle=${this.graph.style.edge.value.title};orthogonalLoop=1;strokeWidth=1;dashed=1;startFill=0;endArrow=none;endFill=0;startArrow=none;orthogonal=1;elbow=vertical;`;\n                        let strokeColor = this.model.graph.path.colors[index] || _.sample(this.graph.path.colors);\n                        graph.insertEdge(parent, k.id, k.class, source, target, baseEdgeStyle+direction+`strokeColor=${strokeColor}`);\n                        return;\n                    }\n\n                    \n                    try {\n                        let edgeName = _.find(this.graph.edges.list,{name:k.class}).remedy;\n                        graph.insertEdge(parent, k.id, edgeName, source, target, baseEdgeStyle+direction);\n                    } catch(err){\n                        graph.insertEdge(parent, k.id, k.class, source, target, baseEdgeStyle+direction);\n                    } \n                })\n                \n            }\n            \n        }\n        finally {\n            \n            model.endUpdate();    \n\n            this.executeLayout();\n\n            setTimeout(()=>{\n                this.onGraphToCenter(true);\n            },500)\n\n        }\n    },\n    renderAndMergeGraph(editor){\n        \n        let graph = new mxGraph();\n        let parent = graph.getDefaultParent();\n        let model = graph.getModel();\n\n        model.beginUpdate();\n        \n        try{\n            \n\n            if(!_.isEmpty(window.URL_PARAMS_ITEM)) {\n                let doc = mxUtils.parseXml(this.graph.data);\n                let codec = new mxCodec(doc);\n                codec.decode(doc.documentElement, model);\n            } else {\n                \n                \n                let allNodes = _.concat([],this.graph.data.nodes);\n                let allEdges = _.concat([],this.graph.data.edges);\n\n                if( this.graph.data['diff'] && 'add' in this.graph.data['diff'] ){\n                    allNodes = _.concat(allNodes, this.graph.data.diff.add.nodes);\n                    allEdges = _.concat(allEdges, this.graph.data.diff.add.edges);\n                }\n\n                if( this.graph.data['diff'] && 'del' in this.graph.data['diff'] ){\n                    allNodes = _.concat(allNodes, this.graph.data.diff.del.nodes);\n                    allEdges = _.concat(allEdges, this.graph.data.diff.del.edges);\n                }\n\n                allNodes = _.uniqBy(allNodes,'id');\n                allEdges = _.uniqBy(allEdges,'id'); \n                \n                // 绘制节点\n                _.forEach(allNodes,(v)=>{\n\n                    let type = v._icon || 'matrix';\n\n                    // 可设置默认显示属性\n                    let name =  '';\n\n                    try{\n                        if(window.URL_PARAMS_GRAPH){\n                            name = v[window.URL_PARAMS_GRAPH.title];\n                        } else {\n                            name = v[this.model.graph.default.title];\n                        }\n                    } catch(err){\n                        name = v[\"id\"];\n                    }\n\n                    // 选择节点渲染模式：icon/shape\n                    let imageUrl = this.imageRenderHandler(type);\n\n                    // icon渲染\n                    if(this.graph.control.ifIcon){\n                        if(this.checkImgExists(`${type}.png`)){\n                            graph.insertVertex(parent, v.id, name, 50, 50, 60, 60,`shape=image;html=1;image=${imageUrl};verticalLabelPosition=bottom;verticalAlign=top;`);\n                        } else {\n                            graph.insertVertex(parent, v.id, name, 50, 50, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                        }    \n                    } \n                    // shape渲染\n                    else {\n                        graph.insertVertex(parent, v.id, name, 50, 50, 50, 50,`shape=ellipse;perimeter=ellipsePerimeter;html=1;labelPosition=center;verticalLabelPosition=bottom;align=center;verticalAlign=middle;`);\n                    }\n                })\n                \n                // 绘制边\n                _.forEach(allEdges,(k,index)=>{\n                    \n                    let source = model.getCell(k.source);\n                    let target = model.getCell(k.target);\n                    \n                    let baseEdgeStyle = `edgeStyle=${this.graph.style.edge.value.title};html=1;rounded=1;jettySize=auto;orthogonalLoop=1;endArrow=block;endFill=1;`;\n                    let direction = '';\n\n                    if(k.twoway){\n                        direction = 'startArrow=block;endArrow=block;endFill=1;';\n                    }\n\n                    // edge为path的样式\n                    if(k.class === \"path\"){\n                        baseEdgeStyle = `edgeStyle=${this.graph.style.edge.value.title};orthogonalLoop=1;strokeWidth=1;dashed=1;startFill=0;endArrow=none;endFill=0;startArrow=none;orthogonal=1;elbow=vertical;`;\n                        let strokeColor = this.model.graph.path.colors[index] || _.sample(this.graph.path.colors);\n                        graph.insertEdge(parent, k.id, k.class, source, target, baseEdgeStyle+direction+`strokeColor=${strokeColor}`);\n                        return;\n                    }\n\n                    \n                    try {\n                        let edgeName = _.find(this.graph.edges.list,{name:k.class}).remedy;\n                        graph.insertEdge(parent, k.id, edgeName, source, target, baseEdgeStyle+direction);\n                    } catch(err){\n                        graph.insertEdge(parent, k.id, k.class, source, target, baseEdgeStyle+direction);\n                    } \n                })\n                \n            }\n            \n        }\n        finally {\n            \n            model.endUpdate();    \n\n            // 合并图\n            editor.graph.getModel().mergeChildren(model.getRoot(), parent, true);\n\n    \n            this.executeLayout();\n\n            this.onGraphToCenter(true);\n\n        }\n    },\n    // 图分析 - 子图\n    loadSubGraph(node){\n\n        let term = \"\";\n        let edgeStr = _.isEmpty(node.edge) ? node.edge : `:${node.edge}`;\n\n        if(node.direction==\"out\"){\n            term = `match ('${node.node.id}') - [${edgeStr}*${node.step}] -> ()`;\n        } else{\n            term = `match ('${node.node.id}') <- [${edgeStr}*${node.step}] - ()`;\n        }\n\n        this.m3.callFS(\"/matrix/m3graph/graphService.js\", encodeURIComponent(term)).then( res=>{\n            \n            let rtn = res.message[0].graph;\n            console.log(1111,rtn)\n\n            let allNodes = _.concat([],rtn.nodes);\n            let allEdges = _.concat([],rtn.edges);\n\n            if( rtn['diff'] && 'add' in rtn['diff'] ){\n                allNodes = _.concat(allNodes, rtn.diff.add.nodes);\n                allEdges = _.concat(allEdges, rtn.diff.add.edges);\n            }\n\n            if( rtn['diff'] && 'del' in rtn['diff'] ){\n                allNodes = _.concat(allNodes, rtn.diff.del.nodes);\n                allEdges = _.concat(allEdges, rtn.diff.del.edges);\n            }\n\n            this.graph.data.nodes = _.uniqBy(allNodes,'id');\n            this.graph.data.edges = _.uniqBy(allEdges,'id');\n\n            this.renderAndMergeGraph(this.graph.editor);\n\n        } );\n        \n        \n    },\n    // 右键菜单\n    createPopupMenu(editor, graph, menu, cell, evt){\n        \n        // 节点或边菜单\n        if (cell != null){\n            \n            // cell object\n            let id = cell.getId();\n            let value = cell.getValue();\n            \n            // 节点菜单\n            if(!cell.edge){\n                \n                if(!this.m3.auth.isAdmin) return;\n\n                let node = {id: id, value: value, type:'event', cell: cell};\n\n                /* menu.addItem('实体分析', null, ()=>{\n                    \n                }); */\n\n                /* menu.addItem('实体删除', null, ()=>{\n                    this.removeEntityHandler(cell);\n                }); */\n\n                // menu.addSeparator();\n                \n                menu.addItem('节点删除', null, ()=>{\n                    this.onDeleteSelectedCells(graph,evt != null && mxEvent.isShiftDown(evt));\n                });\n\n                let vars = {};\n                let submenuBsearch = null;\n                let submenuEsearch = null;\n                this.m3.callFS(\"/matrix/m3graph/getEdgesByClass.js\",encodeURIComponent(id)).then(rtn=>{\n                    \n                    menu.addSeparator();\n\n                    let edgeListByClass = rtn.message;\n\n                    if(_.find(edgeListByClass,{direction:'out'})){\n                        submenuBsearch = menu.addItem('起点查询', null, null);\n                    }\n                    if(_.find(edgeListByClass,{direction:'in'})){\n                        submenuEsearch = menu.addItem('终点查询', null, null);\n                    }\n                    _.forEach(edgeListByClass,(v,index)=>{\n                        \n                        if(v.direction == 'out'){\n                            \n                            vars['submenuBStep'+index] = menu.addItem(v.remedy,null,null,submenuBsearch)\n                            let stepCount = Array(6);\n                            _.forEach(stepCount,(val,idx)=>{\n                                let step = idx + 1;\n                                \n                                menu.addItem(step + '跳', null, ()=>{\n                                    this.loadSubGraph({direction:\"out\",node:node,step:step,edge:v.name});\n                                },vars['submenuBStep'+index]);\n                            \n                            })\n                        } else {\n                            vars['submenuEStep'+index] = menu.addItem(v.remedy,null,null,submenuEsearch);\n                            let stepCount = Array(6);\n                            _.forEach(stepCount,(val,idx)=>{\n                                let step = idx + 1;\n                                \n                                menu.addItem(step + '跳', null, ()=>{\n                                    this.loadSubGraph({direction:\"in\",node:node,step:step,edge:v.name});\n                                },vars['submenuEStep'+index]);\n                                \n                            })\n                        }\n                        \n                    })\n\n                })\n                    \n                \n\n            } else {\n                \n                if(!this.m3.auth.isAdmin) return;\n\n                // node = {id: id, value: value, type:'edge', cell: cell};\n\n                /* menu.addItem('实体关系分析', null, ()=>{\n                    \n                });\n                menu.addItem('实体关系删除', null, ()=>{\n                    \n                });\n                menu.addSeparator();\n\n                menu.addItem('新建关系类型', null, ()=>{\n                    \n                });\n                menu.addItem('更新关系类型', null, ()=>{\n                    \n                });\n                \n                menu.addSeparator();\n\n                menu.addItem('隐藏边', null, ()=>{\n                    \n                }); */\n            }\n        } \n        // 画布菜单\n        else {\n\n            let cells = this.graph.editor.graph.getChildVertices(this.graph.editor.graph.getDefaultParent())\n            if(!_.isEmpty(cells)){\n                menu.addItem('清空', null, ()=>{\n                    this.onCanvasClear();\n                });\n            }\n            menu.addSeparator();\n\n            \n            let submenuLayout = menu.addItem('布局', null, null);\n\n            let submenuLayoutHierarchical = menu.addItem('分层布局', null, null,submenuLayout);\n            menu.addItem('上下', null, ()=>{\n                this.graph.layout.default = 'hierarchical_vertical';\n                this.executeLayout();\n            }, submenuLayoutHierarchical);\n            menu.addItem('左右', null, ()=>{\n                this.graph.layout.default = 'hierarchical_horizontal';\n                this.executeLayout();\n            }, submenuLayoutHierarchical);\n\n            \n            let submenuLayoutTree = menu.addItem('树形布局', null, null,submenuLayout);\n\n            menu.addItem('上下', null, ()=>{\n                this.graph.layout.default = 'tree_vertical';\n                this.executeLayout();\n            }, submenuLayoutTree);\n            menu.addItem('左右', null, ()=>{\n                this.graph.layout.default = 'tree_horizontal';\n                this.executeLayout();\n            }, submenuLayoutTree);\n\n            menu.addItem('随机布局', null, ()=>{\n                this.graph.layout.default = 'organic';\n                this.executeLayout();\n            }, submenuLayout);\n            menu.addItem('圆形布局', null, ()=>{\n                this.graph.layout.default = 'circle';\n                this.executeLayout();\n            }, submenuLayout);\n\n        }\n        \n    },\n    // 设置布局\n    executeLayout(){\n        let graph = this.graph.editor.graph;\n        let parent = graph.getDefaultParent();\n        let layout = this.graph.layout;\n        let model = graph.getModel();\n\n        // 布局定义\n        if(layout.default === 'hierarchical_vertical'){\n            // Layout hierarchical\n            model.beginUpdate();\n            try {\n                layout.inst = new mxHierarchicalLayout(graph, mxConstants.DIRECTION_NORTH);\n                layout.inst.edgeStyle = layout.edgeStyle;\n                layout.inst.intraCellSpacing = 80;\n                layout.inst.interRankCellSpacing = 80;\n                \n                layout.inst.execute(parent, null);\n\n            } finally {\n                let morph = new mxMorphing(graph);  \n                morph.addListener(mxEvent.DONE, function(){  \n                    model.endUpdate();  \n                });  \n                    \n                morph.startAnimation();  \n            }\n            \n        } else if(layout.default === 'hierarchical_horizontal'){\n            // Layout hierarchical\n            model.beginUpdate();\n            try {\n                layout.inst = new mxHierarchicalLayout(graph, mxConstants.DIRECTION_WEST);\n                layout.inst.edgeStyle = layout.edgeStyle;\n                layout.inst.intraCellSpacing = 80;\n                layout.inst.interRankCellSpacing = 80;\n                \n                layout.inst.execute(parent, null);\n            } finally {\n                let morph = new mxMorphing(graph);  \n                morph.addListener(mxEvent.DONE, function(){  \n                    model.endUpdate();  \n                });  \n                    \n                morph.startAnimation();  \n            }\n            \n        } else if(layout.default === 'organic'){\n            // Layout Organic\n            model.beginUpdate();\n            try {\n                layout.inst = new mxFastOrganicLayout(graph);\n                layout.inst.forceConstant = 140;\n                //layout.inst.execute(parent);\n\n                layout.inst.execute(parent,null);\n            } finally {\n                model.endUpdate();\n            }\n            \n        } else if(layout.default === 'tree_vertical'){\n            /* Layout tree vertical */\n            model.beginUpdate();\n            try {\n                let tmp = graph.getSelectionCell();\n                let roots = null;\n                let cells = [tmp];\n                \n                if ( tmp == null || model.getChildCount(tmp) == 0 ) {\n                    if (model.getEdgeCount(tmp) == 0){\n                        roots = graph.findTreeRoots(parent);\n                    }\n                } else {\n                    roots = graph.findTreeRoots(tmp);\n                }\n\n                if ( roots != null && roots.length > 0 ) {\n                    cells = roots;\n                }\n                \n                if( cells.length > 0 ) {\n                    _.forEach(cells,(v)=>{\n                        layout.inst = new mxCompactTreeLayout(graph, false);\n                        layout.inst.edgeRouting = false;\n                        layout.inst.levelDistance = 30;\n                        layout.inst.execute(parent, v);\n                    })\n                }\n\n            } finally {\n                let morph = new mxMorphing(graph);  \n                morph.addListener(mxEvent.DONE, function(){  \n                    model.endUpdate();  \n                });  \n                    \n                morph.startAnimation();  \n            }\n        } else if(layout.default === 'tree_horizontal'){\n            /* Layout tree horizontal */\n            model.beginUpdate();\n            try {\n                let tmp = graph.getSelectionCell();\n                let roots = null;\n                let cells = [tmp];\n                \n                if (tmp == null || model.getChildCount(tmp) == 0){\n                    if (model.getEdgeCount(tmp) == 0){\n                        roots = graph.findTreeRoots(parent);\n                    }\n                } else {\n                    roots = graph.findTreeRoots(tmp);\n                }\n\n                if (roots != null && roots.length > 0){\n                    cells = roots;\n                }\n                \n                if( cells.length > 0 ) {\n                    _.forEach(cells,(v)=>{\n                        layout.inst = new mxCompactTreeLayout(graph, true);\n                        layout.inst.edgeRouting = false;\n                        layout.inst.levelDistance = 30;\n                        layout.inst.execute(parent, v);\n                    })\n                }\n                \n            } finally {\n                let morph = new mxMorphing(graph);  \n                morph.addListener(mxEvent.DONE, function(){  \n                    model.endUpdate();  \n                });  \n                    \n                morph.startAnimation();  \n            }\n        } else {\n            /* Layout Circle */\n            model.beginUpdate();\n            try {\n                layout.inst = new mxCircleLayout(graph);\n                layout.inst.execute(parent, null);\n            } finally {\n                model.endUpdate();\n            }\n        }\n        \n    },\n    // 节点告警状态\n    onRefreshCellStatus(){\n        \n        let graph = this.graph.editor.graph;\n        let parent = graph.getDefaultParent();\n        \n        // 图所有节点\n        let cells = _.map(graph.getChildVertices(parent),v=>{\n                        return {gid: v.id, name: v.value};\n                    });\n\n        this.m3.callFS(\"/matrix/m3graph/graph_imap_data.js\", encodeURIComponent(JSON.stringify(cells))).then( rtn=>{\n            \n            graph.getModel().beginUpdate();\n\n            try {\n                \n                _.forEach(rtn.message,(v)=>{\n                    let id = v.gid;\n                    let status = v.status;\n                    let cell = graph.getModel().getCell(id);\n                    //let state = graph.view.getState(cell);\n                    \n                    if (cell != null) {\n                        \n                        // Resets\n                        graph.removeCellOverlays(cell);\n\n                        if (status >= 5) {\n                            graph.addCellOverlay(cell, this.createOverlayByTip(status, `${id}: 重大告警`));\n                        } else if (status >3 && status < 5) {\n                            graph.addCellOverlay(cell, this.createOverlayByTip(status, `${id}: 严重告警`));\n                        } else {\n                            graph.removeCellOverlays(cell);\n                        } \n                    \n                    }\n\n                })\n\n            } \n            finally {\n                graph.getModel().endUpdate();\n            }\n        } );\n    },\n    // 节点状态渲染图标\n    createOverlayByTip(image, tooltip) {                  \n        let overlay = new mxCellOverlay(new mxImage(`/static/assets/images/apps/png/severity/${image}.png`,24,24), tooltip, mxConstants.ALIGN_RIGHT, mxConstants.ALIGN_TOP, new mxPoint(-10,15));\n        return overlay;\n    },\n    // 删除选择的节点\n    onDeleteSelectedCells(graph,includeEdges){\n        // Cancels interactive operations\n        graph.escape();\n        var cells = graph.getDeletableCells(graph.getSelectionCells());\n        \n        if (cells != null && cells.length > 0){\n            var parents = graph.model.getParents(cells);\n            graph.removeCells(cells, includeEdges);\n            \n            // Selects parents for easier editing of groups\n            if (parents != null){\n                var select = [];\n                \n                for (var i = 0; i < parents.length; i++){\n                    if (graph.model.contains(parents[i]) &&\n                        (graph.model.isVertex(parents[i]) ||\n                        graph.model.isEdge(parents[i]))){\n                        select.push(parents[i]);\n                    }\n                }\n                graph.setSelectionCells(select);\n            }\n        }\n    },\n    // 节点高亮定位显示\n    onCellPosition(row,hFlag,vFlag){\n        \n        let id = row.entity;\n        let editor = this.graph.editor; \n        let graph = editor.graph;\n        let cell = graph.getModel().getCell(id);\n\n        try{\n            // 根据cell数量决定视图是否缩放\n            if(this.graph.data.nodes.length > 10){\n                editor.execute(\"fit\");    \n            } else {\n                editor.execute(\"actualSize\");  \n            }\n            \n            let containerW = graph.container.clientWidth;\n            let containerH = graph.container.clientHeight;\n            let x =-cell.geometry.x + ( containerW - cell.geometry.width) / 2;\n            let y =-cell.geometry.y + ( containerH - cell.geometry.height) / 2;\n            \n            if( hFlag ){\n                x = x / 2;\n            }\n\n            if( vFlag ){\n                y = y / 2;\n            }\n            \n            graph.getView().setTranslate(x,y);\n            graph.scrollCellToVisible(cell);\n            graph.setSelectionCells([cell]);\n\n            _.delay(()=>{\n                let state = graph.view.getState(cell);\n                \n                if(this.graph.control.ifIcon){\n                    state.shape.node.getElementsByTagName(\"image\")[0].setAttribute('class', 'animated flash');\n                } else {\n                    state.shape.node.getElementsByTagName(\"ellipse\")[0].setAttribute('class', 'animated flash');\n                }\n            },500)\n\n            // 选择节点突出显示\n            graph.setCellStyles(mxConstants.STYLE_PERIMETER_SPACING, 8, [cell]);\n            \n        } catch(err){\n            \n            // 当前画布中不包含该实体\n            this.$message({\n                type: \"info\",\n                message: \"没有该实体 \"\n            })\n        }\n    },\n    // 画布清空\n    onCanvasClear(){\n        this.graph.editor.execute(\"selectAll\");\n        this.graph.editor.execute(\"delete\");\n    }\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n    .el-container{\n        height: calc(100vh - 50px)!important;\n    }\n</style>\n\n<style>\n    .outlineContainer{\n        position:absolute;\n        overflow:hidden;\n        top:20px;\n        right:90px;\n        width:200px;\n        height:140px;\n        background:transparent;\n        box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n    }\n    /* mxgraph contextmenu style */\n    td.mxPopupMenuIcon div {\n        width:16px;\n        height:16px;\n    }\n    html div.mxPopupMenu {\n        -webkit-box-shadow:2px 2px 3px #d5d5d5;\n        -moz-box-shadow:2px 2px 3px #d5d5d5;\n        box-shadow:2px 2px 3px #d5d5d5;\n        _filter:progid:DXImageTransform.Microsoft.DropShadow(OffX=2, OffY=2, Color='#d0d0d0', Positive='true');\n        background:white;\n        position:absolute;\n        border:1px solid #e7e7e7;\n        padding:3px;\n    }\n    html table.mxPopupMenu {\n        border-collapse:collapse;\n        margin:0px;\n    }\n    html td.mxPopupMenuItem {\n        padding:7px 30px 7px 30px;\n        font-family: \"微软雅黑\";/* Microsoft YaHei,Helvetica Neue,Helvetica,Arial Unicode MS,Arial;*/\n        font-size:12px;\n    }\n    html td.mxPopupMenuIcon {\n        background-color:white;\n        padding:0px;\n    }\n    td.mxPopupMenuIcon .geIcon {\n        padding:2px;\n        padding-bottom:4px;\n        margin:2px;\n        border:1px solid transparent;\n        opacity:0.5;\n        _width:26px;\n        _height:26px;\n    }\n    td.mxPopupMenuIcon .geIcon:hover {\n        border:1px solid gray;\n        border-radius:2px;\n        opacity:1;\n    }\n    html tr.mxPopupMenuItemHover {\n        background-color: #f5f5f5;\n        color: black;\n    }\n    table.mxPopupMenu hr {\n        color:#cccccc;\n        background-color:#f5f5f5;\n        border:none;\n        height:1px;\n    }\n    table.mxPopupMenu tr {\n        font-size:4pt;\n    }\n</style>\n"]}]}