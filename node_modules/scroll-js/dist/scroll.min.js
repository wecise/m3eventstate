/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function n(n,e,o,t){return new(o||(o=Promise))((function(r,i){function s(n){try{l(t.next(n))}catch(n){i(n)}}function c(n){try{l(t.throw(n))}catch(n){i(n)}}function l(n){var e;n.done?r(n.value):(e=n.value,e instanceof o?e:new o((function(n){n(e)}))).then(s,c)}l((t=t.apply(n,e||[])).next())}))}const e=300;function o(e,o={}){return n(this,void 0,void 0,(function*(){if(!(e instanceof Element||e instanceof Window))throw new Error(`element passed to scrollTo() must be either the window or a DOM element, you passed ${e}!`);o=r(o);const n=(o,t,r,s,c=300,l,u)=>{window.requestAnimationFrame(()=>{const a=Date.now(),d=Math.min(1,(a-s)/c);if(o===t)return u?u():null;!function(n,e){const o=i.getDocument();n===o.body||n===o.documentElement||n instanceof Window?(o.body.scrollTop=e,o.documentElement.scrollTop=e):n.scrollTop=e}(e,l(d)*(t-o)+o),d<1?n(o,t,r,s,c,l,u):u&&u()})},t=function(n){const e=i.getDocument();return n===e.body||n===e.documentElement||n instanceof Window?e.body.scrollTop||e.documentElement.scrollTop:n.scrollTop}(e),s=function(n){const e={window:{y:"scrollY",x:"scrollX"},element:{y:"scrollTop",x:"scrollLeft"}},o="y";return n instanceof Window?e.window[o]:e.element[o]}(e);return new Promise(e=>{n(t,"number"==typeof o.top?o.top:t,s,Date.now(),o.duration,c(o.easing),e)})}))}function t(n,e,t){!function(n){if(void 0===n){throw new Error("The element passed to scrollIntoView() was undefined.")}if(!(n instanceof HTMLElement))throw new Error(`The element passed to scrollIntoView() must be a valid element. You passed ${n}.`)}(n),!e||e instanceof Element||(t=e,e=void 0);const{duration:s,easing:c}=r(t);e=e||i.getDocument().body;let l=0,u=n?n.offsetTop:0;const a=i.getDocument();return e!==a.body&&e!==a.documentElement||(l=window.pageYOffset,u=n.getBoundingClientRect().top+l),o(e,{top:u,left:0,duration:s,easing:c})}function r(n={}){return"smooth"===n.behavior&&(n.easing="ease-in-out",n.duration=300),"auto"===n.behavior&&(n.duration=0,n.easing="linear"),n}const i={getDocument:()=>document},s={linear:n=>n,"ease-in":n=>n*n,"ease-out":n=>n*(2-n),"ease-in-out":n=>n<.5?2*n*n:(4-2*n)*n-1},c=n=>{const e=s[n||"linear"];if(!e){const e=Object.keys(s).join(",");throw new Error(`Scroll error: scroller does not support an easing option of "${n}". Supported options are ${e}`)}return e};export{e as DEFAULT_DURATION,s as easingMap,t as scrollIntoView,o as scrollTo,i as utils};
